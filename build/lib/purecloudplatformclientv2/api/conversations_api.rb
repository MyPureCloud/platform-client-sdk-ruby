=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class ConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete/cancel an async request
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_analytics_conversations_details_job(job_id, opts = {})
      delete_analytics_conversations_details_job_with_http_info(job_id, opts)
      return nil
    end

    # Delete/cancel an async request
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_analytics_conversations_details_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_analytics_conversations_details_job ..."
      end
      
      
      # verify the required parameter 'job_id' is set
      fail ArgumentError, "Missing the required parameter 'job_id' when calling ConversationsApi.delete_analytics_conversations_details_job" if job_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/jobs/{jobId}".sub('{format}','json').sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_analytics_conversations_details_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a code used to add a communication to this participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param add_communication_code addCommunicationCode
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversation_participant_code(conversation_id, participant_id, add_communication_code, opts = {})
      delete_conversation_participant_code_with_http_info(conversation_id, participant_id, add_communication_code, opts)
      return nil
    end

    # Delete a code used to add a communication to this participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param add_communication_code addCommunicationCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversation_participant_code_with_http_info(conversation_id, participant_id, add_communication_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversation_participant_code ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.delete_conversation_participant_code" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.delete_conversation_participant_code" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'add_communication_code' is set
      fail ArgumentError, "Missing the required parameter 'add_communication_code' when calling ConversationsApi.delete_conversation_participant_code" if add_communication_code.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/codes/{addCommunicationCode}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'addCommunicationCode' + '}', add_communication_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversation_participant_code\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove flagged reason from conversation participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversation_participant_flaggedreason(conversation_id, participant_id, opts = {})
      delete_conversation_participant_flaggedreason_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Remove flagged reason from conversation participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversation_participant_flaggedreason_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversation_participant_flaggedreason ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.delete_conversation_participant_flaggedreason" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.delete_conversation_participant_flaggedreason" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversation_participant_flaggedreason\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel the transfer
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversations_call_participant_consult(conversation_id, participant_id, opts = {})
      delete_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Cancel the transfer
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_call_participant_consult ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.delete_conversations_call_participant_consult" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.delete_conversations_call_participant_consult" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_call_participant_consult\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete attachment from draft
    # 
    # @param conversation_id conversationId
    # @param attachment_id attachmentId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversations_email_messages_draft_attachment(conversation_id, attachment_id, opts = {})
      delete_conversations_email_messages_draft_attachment_with_http_info(conversation_id, attachment_id, opts)
      return nil
    end

    # Delete attachment from draft
    # 
    # @param conversation_id conversationId
    # @param attachment_id attachmentId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversations_email_messages_draft_attachment_with_http_info(conversation_id, attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_email_messages_draft_attachment ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.delete_conversations_email_messages_draft_attachment" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'attachment_id' is set
      fail ArgumentError, "Missing the required parameter 'attachment_id' when calling ConversationsApi.delete_conversations_email_messages_draft_attachment" if attachment_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages/draft/attachments/{attachmentId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_email_messages_draft_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversations_messaging_integrations_facebook_integration_id(integration_id, opts = {})
      delete_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, opts)
      return nil
    end

    # Delete a Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_messaging_integrations_facebook_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.delete_conversations_messaging_integrations_facebook_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_messaging_integrations_facebook_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversations_messaging_integrations_line_integration_id(integration_id, opts = {})
      delete_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, opts)
      return nil
    end

    # Delete a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_messaging_integrations_line_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.delete_conversations_messaging_integrations_line_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/line/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_messaging_integrations_line_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a Twitter messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_conversations_messaging_integrations_twitter_integration_id(integration_id, opts = {})
      delete_conversations_messaging_integrations_twitter_integration_id_with_http_info(integration_id, opts)
      return nil
    end

    # Delete a Twitter messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_conversations_messaging_integrations_twitter_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_messaging_integrations_twitter_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.delete_conversations_messaging_integrations_twitter_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/twitter/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_messaging_integrations_twitter_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a WhatsApp messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [WhatsAppIntegration]
    def delete_conversations_messaging_integrations_whatsapp_integration_id(integration_id, opts = {})
      data, _status_code, _headers = delete_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, opts)
      return data
    end

    # Delete a WhatsApp messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsAppIntegration, Fixnum, Hash)>] WhatsAppIntegration data, response status code and response headers
    def delete_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.delete_conversations_messaging_integrations_whatsapp_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.delete_conversations_messaging_integrations_whatsapp_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhatsAppIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#delete_conversations_messaging_integrations_whatsapp_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a conversation by id
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsConversationWithoutAttributes]
    def get_analytics_conversation_details(conversation_id, opts = {})
      data, _status_code, _headers = get_analytics_conversation_details_with_http_info(conversation_id, opts)
      return data
    end

    # Get a conversation by id
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsConversationWithoutAttributes, Fixnum, Hash)>] AnalyticsConversationWithoutAttributes data, response status code and response headers
    def get_analytics_conversation_details_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_analytics_conversation_details ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_analytics_conversation_details" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/{conversationId}/details".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversationWithoutAttributes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_analytics_conversation_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets multiple conversations by id
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Comma-separated conversation ids
    # @return [AnalyticsConversationWithoutAttributesMultiGetResponse]
    def get_analytics_conversations_details(opts = {})
      data, _status_code, _headers = get_analytics_conversations_details_with_http_info(opts)
      return data
    end

    # Gets multiple conversations by id
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :id Comma-separated conversation ids
    # @return [Array<(AnalyticsConversationWithoutAttributesMultiGetResponse, Fixnum, Hash)>] AnalyticsConversationWithoutAttributesMultiGetResponse data, response status code and response headers
    def get_analytics_conversations_details_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_analytics_conversations_details ..."
      end
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if opts[:'id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversationWithoutAttributesMultiGetResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_analytics_conversations_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get status for async query for conversation details
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [AsyncQueryStatus]
    def get_analytics_conversations_details_job(job_id, opts = {})
      data, _status_code, _headers = get_analytics_conversations_details_job_with_http_info(job_id, opts)
      return data
    end

    # Get status for async query for conversation details
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncQueryStatus, Fixnum, Hash)>] AsyncQueryStatus data, response status code and response headers
    def get_analytics_conversations_details_job_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_analytics_conversations_details_job ..."
      end
      
      
      # verify the required parameter 'job_id' is set
      fail ArgumentError, "Missing the required parameter 'job_id' when calling ConversationsApi.get_analytics_conversations_details_job" if job_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/jobs/{jobId}".sub('{format}','json').sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncQueryStatus')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_analytics_conversations_details_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch a page of results for an async query
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Indicates where to resume query results (not required for first page)
    # @option opts [Integer] :page_size The desired maximum number of results
    # @return [AnalyticsConversationAsyncQueryResponse]
    def get_analytics_conversations_details_job_results(job_id, opts = {})
      data, _status_code, _headers = get_analytics_conversations_details_job_results_with_http_info(job_id, opts)
      return data
    end

    # Fetch a page of results for an async query
    # 
    # @param job_id jobId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Indicates where to resume query results (not required for first page)
    # @option opts [Integer] :page_size The desired maximum number of results
    # @return [Array<(AnalyticsConversationAsyncQueryResponse, Fixnum, Hash)>] AnalyticsConversationAsyncQueryResponse data, response status code and response headers
    def get_analytics_conversations_details_job_results_with_http_info(job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_analytics_conversations_details_job_results ..."
      end
      
      
      # verify the required parameter 'job_id' is set
      fail ArgumentError, "Missing the required parameter 'job_id' when calling ConversationsApi.get_analytics_conversations_details_job_results" if job_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/jobs/{jobId}/results".sub('{format}','json').sub('{' + 'jobId' + '}', job_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if opts[:'cursor']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversationAsyncQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_analytics_conversations_details_job_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation
    # 
    # @param conversation_id conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def get_conversation(conversation_id, opts = {})
      data, _status_code, _headers = get_conversation_with_http_info(conversation_id, opts)
      return data
    end

    # Get conversation
    # 
    # @param conversation_id conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def get_conversation_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversation ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch info on a secure session
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param secure_session_id secure IVR session ID
    # @param [Hash] opts the optional parameters
    # @return [SecureSession]
    def get_conversation_participant_secureivrsession(conversation_id, participant_id, secure_session_id, opts = {})
      data, _status_code, _headers = get_conversation_participant_secureivrsession_with_http_info(conversation_id, participant_id, secure_session_id, opts)
      return data
    end

    # Fetch info on a secure session
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param secure_session_id secure IVR session ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecureSession, Fixnum, Hash)>] SecureSession data, response status code and response headers
    def get_conversation_participant_secureivrsession_with_http_info(conversation_id, participant_id, secure_session_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversation_participant_secureivrsession ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation_participant_secureivrsession" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversation_participant_secureivrsession" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'secure_session_id' is set
      fail ArgumentError, "Missing the required parameter 'secure_session_id' when calling ConversationsApi.get_conversation_participant_secureivrsession" if secure_session_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions/{secureSessionId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'secureSessionId' + '}', secure_session_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation_participant_secureivrsession\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of secure sessions for this participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [SecureSessionEntityListing]
    def get_conversation_participant_secureivrsessions(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversation_participant_secureivrsessions_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get a list of secure sessions for this participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SecureSessionEntityListing, Fixnum, Hash)>] SecureSessionEntityListing data, response status code and response headers
    def get_conversation_participant_secureivrsessions_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversation_participant_secureivrsessions ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation_participant_secureivrsessions" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversation_participant_secureivrsessions" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecureSessionEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation_participant_secureivrsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversation_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversation_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversation_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversation_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversation_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversation_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversation_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversation_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversation_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversation_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversation_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversation_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :communication_type Call or Chat communication filtering
    # @return [ConversationEntityListing]
    def get_conversations(opts = {})
      data, _status_code, _headers = get_conversations_with_http_info(opts)
      return data
    end

    # Get active conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :communication_type Call or Chat communication filtering
    # @return [Array<(ConversationEntityListing, Fixnum, Hash)>] ConversationEntityListing data, response status code and response headers
    def get_conversations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations ..."
      end
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'communicationType'] = opts[:'communication_type'] if opts[:'communication_type']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get call conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [CallConversation]
    def get_conversations_call(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_call_with_http_info(conversation_id, opts)
      return data
    end

    # Get call conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallConversation, Fixnum, Hash)>] CallConversation data, response status code and response headers
    def get_conversations_call_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_call ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_call" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_call_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_call_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_call_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_call_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_call_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_call_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_call_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_call_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_call_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_call_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_call_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_call_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_call_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_call_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get callback conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [CallbackConversation]
    def get_conversations_callback(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_callback_with_http_info(conversation_id, opts)
      return data
    end

    # Get callback conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallbackConversation, Fixnum, Hash)>] CallbackConversation data, response status code and response headers
    def get_conversations_callback_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_callback ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_callback" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallbackConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_callback_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_callback_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_callback_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_callback_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_callback_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_callback_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_callback_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_callback_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_callback_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_callback_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_callback_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_callback_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_callback_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_callback_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active callback conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [CallbackConversationEntityListing]
    def get_conversations_callbacks(opts = {})
      data, _status_code, _headers = get_conversations_callbacks_with_http_info(opts)
      return data
    end

    # Get active callback conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallbackConversationEntityListing, Fixnum, Hash)>] CallbackConversationEntityListing data, response status code and response headers
    def get_conversations_callbacks_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_callbacks ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallbackConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_callbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active call conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [CallConversationEntityListing]
    def get_conversations_calls(opts = {})
      data, _status_code, _headers = get_conversations_calls_with_http_info(opts)
      return data
    end

    # Get active call conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CallConversationEntityListing, Fixnum, Hash)>] CallConversationEntityListing data, response status code and response headers
    def get_conversations_calls_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_calls ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/calls".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get call history
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size, maximum 50 (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :interval Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39;
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @return [CallHistoryConversationEntityListing]
    def get_conversations_calls_history(opts = {})
      data, _status_code, _headers = get_conversations_calls_history_with_http_info(opts)
      return data
    end

    # Get call history
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size, maximum 50
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :interval Interval string; format is ISO-8601. Separate start and end times with forward slash &#39;/&#39;
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @return [Array<(CallHistoryConversationEntityListing, Fixnum, Hash)>] CallHistoryConversationEntityListing data, response status code and response headers
    def get_conversations_calls_history_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_calls_history ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/history".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'interval'] = opts[:'interval'] if opts[:'interval']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CallHistoryConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_calls_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the maximum number of participants that this user can have on a conference
    # 
    # @param [Hash] opts the optional parameters
    # @return [MaxParticipants]
    def get_conversations_calls_maximumconferenceparties(opts = {})
      data, _status_code, _headers = get_conversations_calls_maximumconferenceparties_with_http_info(opts)
      return data
    end

    # Get the maximum number of participants that this user can have on a conference
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaxParticipants, Fixnum, Hash)>] MaxParticipants data, response status code and response headers
    def get_conversations_calls_maximumconferenceparties_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_calls_maximumconferenceparties ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/maximumconferenceparties".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MaxParticipants')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_calls_maximumconferenceparties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get chat conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [ChatConversation]
    def get_conversations_chat(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_chat_with_http_info(conversation_id, opts)
      return data
    end

    # Get chat conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatConversation, Fixnum, Hash)>] ChatConversation data, response status code and response headers
    def get_conversations_chat_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chat ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_chat" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a web chat conversation message
    # The current user must be involved with the conversation to get its messages.
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [WebChatMessage]
    def get_conversations_chat_message(conversation_id, message_id, opts = {})
      data, _status_code, _headers = get_conversations_chat_message_with_http_info(conversation_id, message_id, opts)
      return data
    end

    # Get a web chat conversation message
    # The current user must be involved with the conversation to get its messages.
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebChatMessage, Fixnum, Hash)>] WebChatMessage data, response status code and response headers
    def get_conversations_chat_message_with_http_info(conversation_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chat_message ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_chat_message" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'message_id' is set
      fail ArgumentError, "Missing the required parameter 'message_id' when calling ConversationsApi.get_conversations_chat_message" if message_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/messages/{messageId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebChatMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chat_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the messages of a chat conversation.
    # The current user must be involved with the conversation to get its messages.
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after If specified, get the messages chronologically after the id of this message
    # @option opts [String] :before If specified, get the messages chronologically before the id of this message
    # @option opts [String] :sort_order Sort order (default to ascending)
    # @option opts [Integer] :max_results Limit the returned number of messages, up to a maximum of 100 (default to 100)
    # @return [WebChatMessageEntityList]
    def get_conversations_chat_messages(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_chat_messages_with_http_info(conversation_id, opts)
      return data
    end

    # Get the messages of a chat conversation.
    # The current user must be involved with the conversation to get its messages.
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :after If specified, get the messages chronologically after the id of this message
    # @option opts [String] :before If specified, get the messages chronologically before the id of this message
    # @option opts [String] :sort_order Sort order
    # @option opts [Integer] :max_results Limit the returned number of messages, up to a maximum of 100
    # @return [Array<(WebChatMessageEntityList, Fixnum, Hash)>] WebChatMessageEntityList data, response status code and response headers
    def get_conversations_chat_messages_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chat_messages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_chat_messages" if conversation_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/messages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'after'] = opts[:'after'] if opts[:'after']
      query_params[:'before'] = opts[:'before'] if opts[:'before']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']
      query_params[:'maxResults'] = opts[:'max_results'] if opts[:'max_results']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebChatMessageEntityList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chat_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_chat_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_chat_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_chat_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chat_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_chat_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_chat_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chat_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_chat_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_chat_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_chat_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chat_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_chat_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_chat_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chat_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active chat conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [ChatConversationEntityListing]
    def get_conversations_chats(opts = {})
      data, _status_code, _headers = get_conversations_chats_with_http_info(opts)
      return data
    end

    # Get active chat conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatConversationEntityListing, Fixnum, Hash)>] ChatConversationEntityListing data, response status code and response headers
    def get_conversations_chats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_chats ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/chats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get cobrowse conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [CobrowseConversation]
    def get_conversations_cobrowsesession(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_cobrowsesession_with_http_info(conversation_id, opts)
      return data
    end

    # Get cobrowse conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(CobrowseConversation, Fixnum, Hash)>] CobrowseConversation data, response status code and response headers
    def get_conversations_cobrowsesession_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_cobrowsesession ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_cobrowsesession" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CobrowseConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_cobrowsesession\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_cobrowsesession_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_cobrowsesession_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_cobrowsesession_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_cobrowsesession_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_cobrowsesession_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_cobrowsesession_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_cobrowsesession_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_cobrowsesession_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_cobrowsesession_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_cobrowsesession_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_cobrowsesession_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_cobrowsesession_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_cobrowsesession_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_cobrowsesession_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active cobrowse conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [CobrowseConversationEntityListing]
    def get_conversations_cobrowsesessions(opts = {})
      data, _status_code, _headers = get_conversations_cobrowsesessions_with_http_info(opts)
      return data
    end

    # Get active cobrowse conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CobrowseConversationEntityListing, Fixnum, Hash)>] CobrowseConversationEntityListing data, response status code and response headers
    def get_conversations_cobrowsesessions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_cobrowsesessions ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CobrowseConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_cobrowsesessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [EmailConversation]
    def get_conversations_email(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_email_with_http_info(conversation_id, opts)
      return data
    end

    # Get email conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailConversation, Fixnum, Hash)>] EmailConversation data, response status code and response headers
    def get_conversations_email_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation message
    # 
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [EmailMessage]
    def get_conversations_email_message(conversation_id, message_id, opts = {})
      data, _status_code, _headers = get_conversations_email_message_with_http_info(conversation_id, message_id, opts)
      return data
    end

    # Get conversation message
    # 
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessage, Fixnum, Hash)>] EmailMessage data, response status code and response headers
    def get_conversations_email_message_with_http_info(conversation_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email_message ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email_message" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'message_id' is set
      fail ArgumentError, "Missing the required parameter 'message_id' when calling ConversationsApi.get_conversations_email_message" if message_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages/{messageId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation messages
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [EmailMessageListing]
    def get_conversations_email_messages(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_email_messages_with_http_info(conversation_id, opts)
      return data
    end

    # Get conversation messages
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessageListing, Fixnum, Hash)>] EmailMessageListing data, response status code and response headers
    def get_conversations_email_messages_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email_messages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email_messages" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessageListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation draft reply
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [EmailMessage]
    def get_conversations_email_messages_draft(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_email_messages_draft_with_http_info(conversation_id, opts)
      return data
    end

    # Get conversation draft reply
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessage, Fixnum, Hash)>] EmailMessage data, response status code and response headers
    def get_conversations_email_messages_draft_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email_messages_draft ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email_messages_draft" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages/draft".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email_messages_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_email_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_email_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_email_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_email_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_email_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_email_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_email_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_email_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_email_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_email_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_email_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active email conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [EmailConversationEntityListing]
    def get_conversations_emails(opts = {})
      data, _status_code, _headers = get_conversations_emails_with_http_info(opts)
      return data
    end

    # Get active email conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailConversationEntityListing, Fixnum, Hash)>] EmailConversationEntityListing data, response status code and response headers
    def get_conversations_emails_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_emails ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/emails".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get message conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [MessageConversation]
    def get_conversations_message(conversation_id, opts = {})
      data, _status_code, _headers = get_conversations_message_with_http_info(conversation_id, opts)
      return data
    end

    # Get message conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageConversation, Fixnum, Hash)>] MessageConversation data, response status code and response headers
    def get_conversations_message_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_message ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_message" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get media
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param media_id mediaId
    # @param [Hash] opts the optional parameters
    # @return [MessageMediaData]
    def get_conversations_message_communication_messages_media_media_id(conversation_id, communication_id, media_id, opts = {})
      data, _status_code, _headers = get_conversations_message_communication_messages_media_media_id_with_http_info(conversation_id, communication_id, media_id, opts)
      return data
    end

    # Get media
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param media_id mediaId
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageMediaData, Fixnum, Hash)>] MessageMediaData data, response status code and response headers
    def get_conversations_message_communication_messages_media_media_id_with_http_info(conversation_id, communication_id, media_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_message_communication_messages_media_media_id ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_message_communication_messages_media_media_id" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.get_conversations_message_communication_messages_media_media_id" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'media_id' is set
      fail ArgumentError, "Missing the required parameter 'media_id' when calling ConversationsApi.get_conversations_message_communication_messages_media_media_id" if media_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media/{mediaId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s).sub('{' + 'mediaId' + '}', media_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageMediaData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_message_communication_messages_media_media_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get message
    # 
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [MessageData]
    def get_conversations_message_message(conversation_id, message_id, opts = {})
      data, _status_code, _headers = get_conversations_message_message_with_http_info(conversation_id, message_id, opts)
      return data
    end

    # Get message
    # 
    # @param conversation_id conversationId
    # @param message_id messageId
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageData, Fixnum, Hash)>] MessageData data, response status code and response headers
    def get_conversations_message_message_with_http_info(conversation_id, message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_message_message ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_message_message" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'message_id' is set
      fail ArgumentError, "Missing the required parameter 'message_id' when calling ConversationsApi.get_conversations_message_message" if message_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/messages/{messageId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'messageId' + '}', message_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_message_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional. (default to false)
    # @return [AssignedWrapupCode]
    def get_conversations_message_participant_wrapup(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_message_participant_wrapup_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get the wrap-up for this conversation participant. 
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :provisional Indicates if the wrap-up code is provisional.
    # @return [Array<(AssignedWrapupCode, Fixnum, Hash)>] AssignedWrapupCode data, response status code and response headers
    def get_conversations_message_participant_wrapup_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_message_participant_wrapup ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_message_participant_wrapup" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_message_participant_wrapup" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapup".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'provisional'] = opts[:'provisional'] if opts[:'provisional']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AssignedWrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_message_participant_wrapup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def get_conversations_message_participant_wrapupcodes(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = get_conversations_message_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Get list of wrapup codes for this conversation participant
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def get_conversations_message_participant_wrapupcodes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_message_participant_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.get_conversations_message_participant_wrapupcodes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.get_conversations_message_participant_wrapupcodes" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/wrapupcodes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_message_participant_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get active message conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [MessageConversationEntityListing]
    def get_conversations_messages(opts = {})
      data, _status_code, _headers = get_conversations_messages_with_http_info(opts)
      return data
    end

    # Get active message conversations for the logged in user
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageConversationEntityListing, Fixnum, Hash)>] MessageConversationEntityListing data, response status code and response headers
    def get_conversations_messages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messages ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/messages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageConversationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Genesys Facebook App Id
    # 
    # @param [Hash] opts the optional parameters
    # @return [FacebookAppCredentials]
    def get_conversations_messaging_facebook_app(opts = {})
      data, _status_code, _headers = get_conversations_messaging_facebook_app_with_http_info(opts)
      return data
    end

    # Get Genesys Facebook App Id
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(FacebookAppCredentials, Fixnum, Hash)>] FacebookAppCredentials data, response status code and response headers
    def get_conversations_messaging_facebook_app_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_facebook_app ..."
      end
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/facebook/app".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FacebookAppCredentials')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_facebook_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [MessagingIntegrationEntityListing]
    def get_conversations_messaging_integrations(opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_with_http_info(opts)
      return data
    end

    # Get a list of Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(MessagingIntegrationEntityListing, Fixnum, Hash)>] MessagingIntegrationEntityListing data, response status code and response headers
    def get_conversations_messaging_integrations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagingIntegrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Facebook Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [FacebookIntegrationEntityListing]
    def get_conversations_messaging_integrations_facebook(opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_facebook_with_http_info(opts)
      return data
    end

    # Get a list of Facebook Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(FacebookIntegrationEntityListing, Fixnum, Hash)>] FacebookIntegrationEntityListing data, response status code and response headers
    def get_conversations_messaging_integrations_facebook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_facebook ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/facebook".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FacebookIntegrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_facebook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [FacebookIntegration]
    def get_conversations_messaging_integrations_facebook_integration_id(integration_id, opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, opts)
      return data
    end

    # Get a Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(FacebookIntegration, Fixnum, Hash)>] FacebookIntegration data, response status code and response headers
    def get_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_facebook_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.get_conversations_messaging_integrations_facebook_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FacebookIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_facebook_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of LINE messenger Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [LineIntegrationEntityListing]
    def get_conversations_messaging_integrations_line(opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_line_with_http_info(opts)
      return data
    end

    # Get a list of LINE messenger Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(LineIntegrationEntityListing, Fixnum, Hash)>] LineIntegrationEntityListing data, response status code and response headers
    def get_conversations_messaging_integrations_line_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_line ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/line".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LineIntegrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [LineIntegration]
    def get_conversations_messaging_integrations_line_integration_id(integration_id, opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, opts)
      return data
    end

    # Get a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(LineIntegration, Fixnum, Hash)>] LineIntegration data, response status code and response headers
    def get_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_line_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.get_conversations_messaging_integrations_line_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/line/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LineIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_line_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Twitter Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [TwitterIntegrationEntityListing]
    def get_conversations_messaging_integrations_twitter(opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_twitter_with_http_info(opts)
      return data
    end

    # Get a list of Twitter Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(TwitterIntegrationEntityListing, Fixnum, Hash)>] TwitterIntegrationEntityListing data, response status code and response headers
    def get_conversations_messaging_integrations_twitter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_twitter ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/twitter".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TwitterIntegrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_twitter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Twitter messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [TwitterIntegration]
    def get_conversations_messaging_integrations_twitter_integration_id(integration_id, opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_twitter_integration_id_with_http_info(integration_id, opts)
      return data
    end

    # Get a Twitter messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TwitterIntegration, Fixnum, Hash)>] TwitterIntegration data, response status code and response headers
    def get_conversations_messaging_integrations_twitter_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_twitter_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.get_conversations_messaging_integrations_twitter_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/twitter/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TwitterIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_twitter_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of WhatsApp Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [WhatsAppIntegrationEntityListing]
    def get_conversations_messaging_integrations_whatsapp(opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_whatsapp_with_http_info(opts)
      return data
    end

    # Get a list of WhatsApp Integrations
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(WhatsAppIntegrationEntityListing, Fixnum, Hash)>] WhatsAppIntegrationEntityListing data, response status code and response headers
    def get_conversations_messaging_integrations_whatsapp_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_whatsapp ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/whatsapp".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhatsAppIntegrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_whatsapp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a WhatsApp messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [WhatsAppIntegration]
    def get_conversations_messaging_integrations_whatsapp_integration_id(integration_id, opts = {})
      data, _status_code, _headers = get_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, opts)
      return data
    end

    # Get a WhatsApp messaging integration
    # 
    # @param integration_id Integration ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsAppIntegration, Fixnum, Hash)>] WhatsAppIntegration data, response status code and response headers
    def get_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_integrations_whatsapp_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.get_conversations_messaging_integrations_whatsapp_integration_id" if integration_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhatsAppIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_integrations_whatsapp_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Messaging Stickers
    # 
    # @param messenger_type Messenger Type
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [MessagingStickerEntityListing]
    def get_conversations_messaging_sticker(messenger_type, opts = {})
      data, _status_code, _headers = get_conversations_messaging_sticker_with_http_info(messenger_type, opts)
      return data
    end

    # Get a list of Messaging Stickers
    # 
    # @param messenger_type Messenger Type
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(MessagingStickerEntityListing, Fixnum, Hash)>] MessagingStickerEntityListing data, response status code and response headers
    def get_conversations_messaging_sticker_with_http_info(messenger_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.get_conversations_messaging_sticker ..."
      end
      
      
      # verify the required parameter 'messenger_type' is set
      fail ArgumentError, "Missing the required parameter 'messenger_type' when calling ConversationsApi.get_conversations_messaging_sticker" if messenger_type.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/stickers/{messengerType}".sub('{format}','json').sub('{' + 'messengerType' + '}', messenger_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessagingStickerEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#get_conversations_messaging_sticker\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a participant.
    # Update conversation participant.
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversation_participant(conversation_id, participant_id, body, opts = {})
      patch_conversation_participant_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update a participant.
    # Update conversation participant.
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversation_participant_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversation_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversation_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversation_participant" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversation_participant" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversation_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversation_participant_attributes(conversation_id, participant_id, body, opts = {})
      patch_conversation_participant_attributes_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversation_participant_attributes_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversation_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversation_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversation_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversation_participant_attributes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversation_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by setting it's recording state, merging in other conversations to create a conference, or disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_call(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_call_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by setting it&#39;s recording state, merging in other conversations to create a conference, or disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_call_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_call ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_call" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_call" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_call_participant(conversation_id, participant_id, body, opts = {})
      patch_conversations_call_participant_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_call_participant_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_call_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_call_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_call_participant" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_call_participant" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_call_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_call_participant_attributes(conversation_id, participant_id, body, opts = {})
      patch_conversations_call_participant_attributes_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_call_participant_attributes_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_call_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_call_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_call_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_call_participant_attributes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_call_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_call_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_call_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_call_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_call_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_call_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_call_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_call_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_call_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_call_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change who can speak
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body new speak to
    # @param [Hash] opts the optional parameters
    # @return [ConsultTransferResponse]
    def patch_conversations_call_participant_consult(conversation_id, participant_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, body, opts)
      return data
    end

    # Change who can speak
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body new speak to
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsultTransferResponse, Fixnum, Hash)>] ConsultTransferResponse data, response status code and response headers
    def patch_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_call_participant_consult ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_call_participant_consult" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_call_participant_consult" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_call_participant_consult" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_call_participant_consult\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_callback(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_callback_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_callback_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_callback ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_callback" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_callback" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_callback\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_callback_participant(conversation_id, participant_id, body, opts = {})
      patch_conversations_callback_participant_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_callback_participant_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_callback_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_callback_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_callback_participant" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_callback_participant" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_callback_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_callback_participant_attributes(conversation_id, participant_id, body, opts = {})
      patch_conversations_callback_participant_attributes_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_callback_participant_attributes_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_callback_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_callback_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_callback_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_callback_participant_attributes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_callback_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_callback_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_callback_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_callback_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_callback_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_callback_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_callback_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_callback_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_callback_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_callback_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_chat(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_chat_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_chat_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_chat ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_chat" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_chat" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_chat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_chat_participant(conversation_id, participant_id, body, opts = {})
      patch_conversations_chat_participant_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_chat_participant_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_chat_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_chat_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_chat_participant" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_chat_participant" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_chat_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_chat_participant_attributes(conversation_id, participant_id, body, opts = {})
      patch_conversations_chat_participant_attributes_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_chat_participant_attributes_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_chat_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_chat_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_chat_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_chat_participant_attributes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_chat_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_chat_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_chat_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_chat_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_chat_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_chat_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_chat_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_chat_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_chat_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_chat_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_cobrowsesession(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_cobrowsesession_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_cobrowsesession_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_cobrowsesession ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_cobrowsesession" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_cobrowsesession" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_cobrowsesession\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [MediaParticipantRequest] :body 
    # @return [nil]
    def patch_conversations_cobrowsesession_participant(conversation_id, participant_id, opts = {})
      patch_conversations_cobrowsesession_participant_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [MediaParticipantRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_cobrowsesession_participant_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_cobrowsesession_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_cobrowsesession_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [ParticipantAttributes] :body 
    # @return [nil]
    def patch_conversations_cobrowsesession_participant_attributes(conversation_id, participant_id, opts = {})
      patch_conversations_cobrowsesession_participant_attributes_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [ParticipantAttributes] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_cobrowsesession_participant_attributes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_cobrowsesession_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_cobrowsesession_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_cobrowsesession_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_cobrowsesession_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_cobrowsesession_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_cobrowsesession_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_cobrowsesession_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_cobrowsesession_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_email(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_email_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_email_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_email ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_email" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_email" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_email_participant(conversation_id, participant_id, body, opts = {})
      patch_conversations_email_participant_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Update request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_email_participant_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_email_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_email_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_email_participant" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_email_participant" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_email_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_conversations_email_participant_attributes(conversation_id, participant_id, body, opts = {})
      patch_conversations_email_participant_attributes_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Participant attributes
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_email_participant_attributes_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_email_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_email_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_email_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_email_participant_attributes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_email_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_email_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_email_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_email_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_email_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_email_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_email_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_email_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_email_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_email_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def patch_conversations_message(conversation_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_message_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update a conversation by disconnecting all of the participants
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def patch_conversations_message_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_message ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_message" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_message" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [MediaParticipantRequest] :body 
    # @return [nil]
    def patch_conversations_message_participant(conversation_id, participant_id, opts = {})
      patch_conversations_message_participant_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Update conversation participant
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [MediaParticipantRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_message_participant_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_message_participant ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_message_participant" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_message_participant" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_message_participant\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [ParticipantAttributes] :body 
    # @return [nil]
    def patch_conversations_message_participant_attributes(conversation_id, participant_id, opts = {})
      patch_conversations_message_participant_attributes_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Update the attributes on a conversation participant.
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [ParticipantAttributes] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_conversations_message_participant_attributes_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_message_participant_attributes ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_message_participant_attributes" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_message_participant_attributes" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/attributes".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_message_participant_attributes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation participant's communication by disconnecting it.
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def patch_conversations_message_participant_communication(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_message_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Update conversation participant&#39;s communication by disconnecting it.
    # 
    # @param conversation_id  conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body Participant
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def patch_conversations_message_participant_communication_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_message_participant_communication ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.patch_conversations_message_participant_communication" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.patch_conversations_message_participant_communication" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.patch_conversations_message_participant_communication" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_message_participant_communication" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/communications/{communicationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_message_participant_communication\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param body FacebookIntegrationUpdateRequest
    # @param [Hash] opts the optional parameters
    # @return [FacebookIntegration]
    def patch_conversations_messaging_integrations_facebook_integration_id(integration_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, body, opts)
      return data
    end

    # Update Facebook messaging integration
    # 
    # @param integration_id Integration ID
    # @param body FacebookIntegrationUpdateRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(FacebookIntegration, Fixnum, Hash)>] FacebookIntegration data, response status code and response headers
    def patch_conversations_messaging_integrations_facebook_integration_id_with_http_info(integration_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_messaging_integrations_facebook_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.patch_conversations_messaging_integrations_facebook_integration_id" if integration_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_messaging_integrations_facebook_integration_id" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/facebook/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FacebookIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_messaging_integrations_facebook_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Activate a WhatsApp messaging integration.
    # The following steps are required in order to fully activate a Whatsapp Integration: Initially, you will need to get an activation code by sending: an action set to Activate, and an authenticationMethod choosing from Sms or Voice. Finally, once you have been informed of an activation code on selected authenticationMethod, you will need to confirm the code by sending: an action set to Confirm, and the confirmationCode you have received from Whatsapp.
    # @param integration_id Integration ID
    # @param body WhatsAppIntegrationUpdateRequest
    # @param [Hash] opts the optional parameters
    # @return [WhatsAppIntegration]
    def patch_conversations_messaging_integrations_whatsapp_integration_id(integration_id, body, opts = {})
      data, _status_code, _headers = patch_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, body, opts)
      return data
    end

    # Activate a WhatsApp messaging integration.
    # The following steps are required in order to fully activate a Whatsapp Integration: Initially, you will need to get an activation code by sending: an action set to Activate, and an authenticationMethod choosing from Sms or Voice. Finally, once you have been informed of an activation code on selected authenticationMethod, you will need to confirm the code by sending: an action set to Confirm, and the confirmationCode you have received from Whatsapp.
    # @param integration_id Integration ID
    # @param body WhatsAppIntegrationUpdateRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsAppIntegration, Fixnum, Hash)>] WhatsAppIntegration data, response status code and response headers
    def patch_conversations_messaging_integrations_whatsapp_integration_id_with_http_info(integration_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.patch_conversations_messaging_integrations_whatsapp_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.patch_conversations_messaging_integrations_whatsapp_integration_id" if integration_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.patch_conversations_messaging_integrations_whatsapp_integration_id" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/whatsapp/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhatsAppIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#patch_conversations_messaging_integrations_whatsapp_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Index conversation properties
    # 
    # @param conversation_id conversationId
    # @param body request
    # @param [Hash] opts the optional parameters
    # @return [PropertyIndexRequest]
    def post_analytics_conversation_details_properties(conversation_id, body, opts = {})
      data, _status_code, _headers = post_analytics_conversation_details_properties_with_http_info(conversation_id, body, opts)
      return data
    end

    # Index conversation properties
    # 
    # @param conversation_id conversationId
    # @param body request
    # @param [Hash] opts the optional parameters
    # @return [Array<(PropertyIndexRequest, Fixnum, Hash)>] PropertyIndexRequest data, response status code and response headers
    def post_analytics_conversation_details_properties_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_analytics_conversation_details_properties ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_analytics_conversation_details_properties" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_analytics_conversation_details_properties" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/{conversationId}/details/properties".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PropertyIndexRequest')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_analytics_conversation_details_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for conversation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [ConversationAggregateQueryResponse]
    def post_analytics_conversations_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_conversations_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for conversation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationAggregateQueryResponse, Fixnum, Hash)>] ConversationAggregateQueryResponse data, response status code and response headers
    def post_analytics_conversations_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_analytics_conversations_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_analytics_conversations_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConversationAggregateQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_analytics_conversations_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for conversation details asynchronously
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AsyncQueryResponse]
    def post_analytics_conversations_details_jobs(body, opts = {})
      data, _status_code, _headers = post_analytics_conversations_details_jobs_with_http_info(body, opts)
      return data
    end

    # Query for conversation details asynchronously
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AsyncQueryResponse, Fixnum, Hash)>] AsyncQueryResponse data, response status code and response headers
    def post_analytics_conversations_details_jobs_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_analytics_conversations_details_jobs ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_analytics_conversations_details_jobs" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/jobs".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AsyncQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_analytics_conversations_details_jobs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for conversation details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [AnalyticsConversationQueryResponse]
    def post_analytics_conversations_details_query(body, opts = {})
      data, _status_code, _headers = post_analytics_conversations_details_query_with_http_info(body, opts)
      return data
    end

    # Query for conversation details
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyticsConversationQueryResponse, Fixnum, Hash)>] AnalyticsConversationQueryResponse data, response status code and response headers
    def post_analytics_conversations_details_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_analytics_conversations_details_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_analytics_conversations_details_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/conversations/details/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AnalyticsConversationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_analytics_conversations_details_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.
    # 
    # @param conversation_id conversation ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def post_conversation_disconnect(conversation_id, opts = {})
      data, _status_code, _headers = post_conversation_disconnect_with_http_info(conversation_id, opts)
      return data
    end

    # Performs a full conversation teardown. Issues disconnect requests for any connected media. Applies a system wrap-up code to any participants that are pending wrap-up. This is not intended to be the normal way of ending interactions but is available in the event of problems with the application to allow a resynchronization of state across all components. It is recommended that users submit a support case if they are relying on this endpoint systematically as there is likely something that needs investigation.
    # 
    # @param conversation_id conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_conversation_disconnect_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversation_disconnect ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversation_disconnect" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/disconnect".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversation_disconnect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new callback for the specified participant on the conversation.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCallbackOnConversationCommand] :body 
    # @return [nil]
    def post_conversation_participant_callbacks(conversation_id, participant_id, opts = {})
      post_conversation_participant_callbacks_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Create a new callback for the specified participant on the conversation.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCallbackOnConversationCommand] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversation_participant_callbacks_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversation_participant_callbacks ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversation_participant_callbacks" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversation_participant_callbacks" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/callbacks".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversation_participant_callbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends DTMF to the participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Digits] :body Digits
    # @return [nil]
    def post_conversation_participant_digits(conversation_id, participant_id, opts = {})
      post_conversation_participant_digits_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Sends DTMF to the participant
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [Digits] :body Digits
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversation_participant_digits_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversation_participant_digits ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversation_participant_digits" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversation_participant_digits" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/digits".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversation_participant_digits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversation_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversation_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversation_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversation_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversation_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversation_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversation_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversation_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSecureSession] :body 
    # @return [SecureSession]
    def post_conversation_participant_secureivrsessions(conversation_id, participant_id, opts = {})
      data, _status_code, _headers = post_conversation_participant_secureivrsessions_with_http_info(conversation_id, participant_id, opts)
      return data
    end

    # Create secure IVR session. Only a participant in the conversation can invoke a secure IVR.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @option opts [CreateSecureSession] :body 
    # @return [Array<(SecureSession, Fixnum, Hash)>] SecureSession data, response status code and response headers
    def post_conversation_participant_secureivrsessions_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversation_participant_secureivrsessions ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversation_participant_secureivrsessions" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversation_participant_secureivrsessions" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/secureivrsessions".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SecureSession')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversation_participant_secureivrsessions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Place a new call as part of a callback conversation.
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def post_conversations_call(conversation_id, body, opts = {})
      data, _status_code, _headers = post_conversations_call_with_http_info(conversation_id, body, opts)
      return data
    end

    # Place a new call as part of a callback conversation.
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def post_conversations_call_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_call ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_call" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_call" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_call\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Initiate and update consult transfer
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Destination address &amp; initial speak to
    # @param [Hash] opts the optional parameters
    # @return [ConsultTransferResponse]
    def post_conversations_call_participant_consult(conversation_id, participant_id, body, opts = {})
      data, _status_code, _headers = post_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, body, opts)
      return data
    end

    # Initiate and update consult transfer
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Destination address &amp; initial speak to
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConsultTransferResponse, Fixnum, Hash)>] ConsultTransferResponse data, response status code and response headers
    def post_conversations_call_participant_consult_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_call_participant_consult ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_call_participant_consult" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_call_participant_consult" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_call_participant_consult" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/consult".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConsultTransferResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_call_participant_consult\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listen in on the conversation from the point of view of a given participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_call_participant_monitor(conversation_id, participant_id, opts = {})
      post_conversations_call_participant_monitor_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Listen in on the conversation from the point of view of a given participant.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_call_participant_monitor_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_call_participant_monitor ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_call_participant_monitor" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_call_participant_monitor" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/monitor".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_call_participant_monitor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_call_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversations_call_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_call_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_call_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_call_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_call_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_call_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_call_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add participants to a conversation
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Conversation]
    def post_conversations_call_participants(conversation_id, body, opts = {})
      data, _status_code, _headers = post_conversations_call_participants_with_http_info(conversation_id, body, opts)
      return data
    end

    # Add participants to a conversation
    # 
    # @param conversation_id conversationId
    # @param body Conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(Conversation, Fixnum, Hash)>] Conversation data, response status code and response headers
    def post_conversations_call_participants_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_call_participants ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_call_participants" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_call_participants" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Conversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_call_participants\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_callback_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversations_callback_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_callback_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_callback_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_callback_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_callback_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_callback_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_callback_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Callback
    # 
    # @param body Callback
    # @param [Hash] opts the optional parameters
    # @return [CreateCallbackResponse]
    def post_conversations_callbacks(body, opts = {})
      data, _status_code, _headers = post_conversations_callbacks_with_http_info(body, opts)
      return data
    end

    # Create a Callback
    # 
    # @param body Callback
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCallbackResponse, Fixnum, Hash)>] CreateCallbackResponse data, response status code and response headers
    def post_conversations_callbacks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_callbacks ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_callbacks" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/callbacks".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCallbackResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_callbacks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a call conversation
    # 
    # @param body Call request
    # @param [Hash] opts the optional parameters
    # @return [CreateCallResponse]
    def post_conversations_calls(body, opts = {})
      data, _status_code, _headers = post_conversations_calls_with_http_info(body, opts)
      return data
    end

    # Create a call conversation
    # 
    # @param body Call request
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCallResponse, Fixnum, Hash)>] CreateCallResponse data, response status code and response headers
    def post_conversations_calls_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_calls ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_calls" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateCallResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_calls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a message on behalf of a communication in a chat conversation.
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param body Message
    # @param [Hash] opts the optional parameters
    # @return [WebChatMessage]
    def post_conversations_chat_communication_messages(conversation_id, communication_id, body, opts = {})
      data, _status_code, _headers = post_conversations_chat_communication_messages_with_http_info(conversation_id, communication_id, body, opts)
      return data
    end

    # Send a message on behalf of a communication in a chat conversation.
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param body Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebChatMessage, Fixnum, Hash)>] WebChatMessage data, response status code and response headers
    def post_conversations_chat_communication_messages_with_http_info(conversation_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_chat_communication_messages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_chat_communication_messages" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.post_conversations_chat_communication_messages" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_chat_communication_messages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/communications/{communicationId}/messages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebChatMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_chat_communication_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send a typing-indicator on behalf of a communication in a chat conversation.
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param [Hash] opts the optional parameters
    # @return [WebChatTyping]
    def post_conversations_chat_communication_typing(conversation_id, communication_id, opts = {})
      data, _status_code, _headers = post_conversations_chat_communication_typing_with_http_info(conversation_id, communication_id, opts)
      return data
    end

    # Send a typing-indicator on behalf of a communication in a chat conversation.
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(WebChatTyping, Fixnum, Hash)>] WebChatTyping data, response status code and response headers
    def post_conversations_chat_communication_typing_with_http_info(conversation_id, communication_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_chat_communication_typing ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_chat_communication_typing" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.post_conversations_chat_communication_typing" if communication_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/communications/{communicationId}/typing".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WebChatTyping')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_chat_communication_typing\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_chat_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversations_chat_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_chat_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_chat_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_chat_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_chat_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_chat_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_chat_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a web chat conversation
    # 
    # @param body Create web chat request
    # @param [Hash] opts the optional parameters
    # @return [ChatConversation]
    def post_conversations_chats(body, opts = {})
      data, _status_code, _headers = post_conversations_chats_with_http_info(body, opts)
      return data
    end

    # Create a web chat conversation
    # 
    # @param body Create web chat request
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatConversation, Fixnum, Hash)>] ChatConversation data, response status code and response headers
    def post_conversations_chats_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_chats ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_chats" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/chats".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ChatConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_chats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [TransferRequest] :body 
    # @return [nil]
    def post_conversations_cobrowsesession_participant_replace(conversation_id, participant_id, opts = {})
      post_conversations_cobrowsesession_participant_replace_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param [Hash] opts the optional parameters
    # @option opts [TransferRequest] :body 
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_cobrowsesession_participant_replace_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_cobrowsesession_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_cobrowsesession_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_cobrowsesession_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/cobrowsesessions/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_cobrowsesession_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.
    # 
    # @param conversation_id conversationId
    # @param body Send external email reply
    # @param [Hash] opts the optional parameters
    # @return [EmailConversation]
    def post_conversations_email_inboundmessages(conversation_id, body, opts = {})
      data, _status_code, _headers = post_conversations_email_inboundmessages_with_http_info(conversation_id, body, opts)
      return data
    end

    # Send an email to an external conversation. An external conversation is one where the provider is not PureCloud based. This endpoint allows the sender of the external email to reply or send a new message to the existing conversation. The new message will be treated as part of the existing conversation and chained to it.
    # 
    # @param conversation_id conversationId
    # @param body Send external email reply
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailConversation, Fixnum, Hash)>] EmailConversation data, response status code and response headers
    def post_conversations_email_inboundmessages_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_email_inboundmessages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_email_inboundmessages" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_email_inboundmessages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/inboundmessages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_email_inboundmessages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an email reply
    # 
    # @param conversation_id conversationId
    # @param body Reply
    # @param [Hash] opts the optional parameters
    # @return [EmailMessage]
    def post_conversations_email_messages(conversation_id, body, opts = {})
      data, _status_code, _headers = post_conversations_email_messages_with_http_info(conversation_id, body, opts)
      return data
    end

    # Send an email reply
    # 
    # @param conversation_id conversationId
    # @param body Reply
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessage, Fixnum, Hash)>] EmailMessage data, response status code and response headers
    def post_conversations_email_messages_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_email_messages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_email_messages" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_email_messages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_email_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy attachments from an email message to the current draft.
    # 
    # @param conversation_id conversationId
    # @param body Copy Attachment Request
    # @param [Hash] opts the optional parameters
    # @return [EmailMessage]
    def post_conversations_email_messages_draft_attachments_copy(conversation_id, body, opts = {})
      data, _status_code, _headers = post_conversations_email_messages_draft_attachments_copy_with_http_info(conversation_id, body, opts)
      return data
    end

    # Copy attachments from an email message to the current draft.
    # 
    # @param conversation_id conversationId
    # @param body Copy Attachment Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessage, Fixnum, Hash)>] EmailMessage data, response status code and response headers
    def post_conversations_email_messages_draft_attachments_copy_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_email_messages_draft_attachments_copy ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_email_messages_draft_attachments_copy" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_email_messages_draft_attachments_copy" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages/draft/attachments/copy".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_email_messages_draft_attachments_copy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_email_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversations_email_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_email_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_email_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_email_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_email_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_email_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_email_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an email conversation
    # If the direction of the request is INBOUND, this will create an external conversation with a third party provider. If the direction of the the request is OUTBOUND, this will create a conversation to send outbound emails on behalf of a queue.
    # @param body Create email request
    # @param [Hash] opts the optional parameters
    # @return [EmailConversation]
    def post_conversations_emails(body, opts = {})
      data, _status_code, _headers = post_conversations_emails_with_http_info(body, opts)
      return data
    end

    # Create an email conversation
    # If the direction of the request is INBOUND, this will create an external conversation with a third party provider. If the direction of the the request is OUTBOUND, this will create a conversation to send outbound emails on behalf of a queue.
    # @param body Create email request
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailConversation, Fixnum, Hash)>] EmailConversation data, response status code and response headers
    def post_conversations_emails_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_emails ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_emails" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Fax Conversation
    # 
    # @param body Fax
    # @param [Hash] opts the optional parameters
    # @return [FaxSendResponse]
    def post_conversations_faxes(body, opts = {})
      data, _status_code, _headers = post_conversations_faxes_with_http_info(body, opts)
      return data
    end

    # Create Fax Conversation
    # 
    # @param body Fax
    # @param [Hash] opts the optional parameters
    # @return [Array<(FaxSendResponse, Fixnum, Hash)>] FaxSendResponse data, response status code and response headers
    def post_conversations_faxes_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_faxes ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_faxes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/faxes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FaxSendResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_faxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send message
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param body Message
    # @param [Hash] opts the optional parameters
    # @return [MessageData]
    def post_conversations_message_communication_messages(conversation_id, communication_id, body, opts = {})
      data, _status_code, _headers = post_conversations_message_communication_messages_with_http_info(conversation_id, communication_id, body, opts)
      return data
    end

    # Send message
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param body Message
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageData, Fixnum, Hash)>] MessageData data, response status code and response headers
    def post_conversations_message_communication_messages_with_http_info(conversation_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_message_communication_messages ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_message_communication_messages" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.post_conversations_message_communication_messages" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_message_communication_messages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_message_communication_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create media
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param [Hash] opts the optional parameters
    # @return [MessageMediaData]
    def post_conversations_message_communication_messages_media(conversation_id, communication_id, opts = {})
      data, _status_code, _headers = post_conversations_message_communication_messages_media_with_http_info(conversation_id, communication_id, opts)
      return data
    end

    # Create media
    # 
    # @param conversation_id conversationId
    # @param communication_id communicationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageMediaData, Fixnum, Hash)>] MessageMediaData data, response status code and response headers
    def post_conversations_message_communication_messages_media_with_http_info(conversation_id, communication_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_message_communication_messages_media ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_message_communication_messages_media" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.post_conversations_message_communication_messages_media" if communication_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/communications/{communicationId}/messages/media".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageMediaData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_message_communication_messages_media\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get messages in batch
    # The path parameter [conversationId] should contain the conversationId of the conversation being filtered. The body should contain the messageId(s) of messages being requested. For example: [\"a3069a33b-bbb1-4703-9d68-061d9e9db96e\", \"55bc6be3-078c-4a49-a4e6-1e05776ed7e8\"]
    # @param conversation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body messageIds
    # @return [TextMessageListing]
    def post_conversations_message_messages_bulk(conversation_id, opts = {})
      data, _status_code, _headers = post_conversations_message_messages_bulk_with_http_info(conversation_id, opts)
      return data
    end

    # Get messages in batch
    # The path parameter [conversationId] should contain the conversationId of the conversation being filtered. The body should contain the messageId(s) of messages being requested. For example: [\&quot;a3069a33b-bbb1-4703-9d68-061d9e9db96e\&quot;, \&quot;55bc6be3-078c-4a49-a4e6-1e05776ed7e8\&quot;]
    # @param conversation_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :body messageIds
    # @return [Array<(TextMessageListing, Fixnum, Hash)>] TextMessageListing data, response status code and response headers
    def post_conversations_message_messages_bulk_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_message_messages_bulk ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_message_messages_bulk" if conversation_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/messages/bulk".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TextMessageListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_message_messages_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def post_conversations_message_participant_replace(conversation_id, participant_id, body, opts = {})
      post_conversations_message_participant_replace_with_http_info(conversation_id, participant_id, body, opts)
      return nil
    end

    # Replace this participant with the specified user and/or address
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param body Transfer request
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def post_conversations_message_participant_replace_with_http_info(conversation_id, participant_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_message_participant_replace ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.post_conversations_message_participant_replace" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.post_conversations_message_participant_replace" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_message_participant_replace" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/{conversationId}/participants/{participantId}/replace".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_message_participant_replace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an outbound messaging conversation.
    # If there is an existing conversation between the remote address and the address associated with the queue specified in createOutboundRequest then the result of this request depends on the state of that conversation and the useExistingConversation field of createOutboundRequest. If the existing conversation is in alerting or connected state, then the request will fail. If the existing conversation is disconnected but still within the conversation window then the request will fail unless useExistingConversation is set to true.
    # @param body Create outbound messaging conversation
    # @param [Hash] opts the optional parameters
    # @return [MessageConversation]
    def post_conversations_messages(body, opts = {})
      data, _status_code, _headers = post_conversations_messages_with_http_info(body, opts)
      return data
    end

    # Create an outbound messaging conversation.
    # If there is an existing conversation between the remote address and the address associated with the queue specified in createOutboundRequest then the result of this request depends on the state of that conversation and the useExistingConversation field of createOutboundRequest. If the existing conversation is in alerting or connected state, then the request will fail. If the existing conversation is disconnected but still within the conversation window then the request will fail unless useExistingConversation is set to true.
    # @param body Create outbound messaging conversation
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageConversation, Fixnum, Hash)>] MessageConversation data, response status code and response headers
    def post_conversations_messages_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messages ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MessageConversation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send an agentless outbound message
    # Send an agentlesss (api participant) outbound message using a client credential grant. In order to call this endpoint you will need OAuth token generated using OAuth client credentials authorized with at least messaging scope. This will generate a new Conversation, if there is an existing active Conversation between the fromAddress and toAddress already, then this POST will fail.
    # @param body Create agentless outbound messaging request
    # @param [Hash] opts the optional parameters
    # @return [SendAgentlessOutboundMessageResponse]
    def post_conversations_messages_agentless(body, opts = {})
      data, _status_code, _headers = post_conversations_messages_agentless_with_http_info(body, opts)
      return data
    end

    # Send an agentless outbound message
    # Send an agentlesss (api participant) outbound message using a client credential grant. In order to call this endpoint you will need OAuth token generated using OAuth client credentials authorized with at least messaging scope. This will generate a new Conversation, if there is an existing active Conversation between the fromAddress and toAddress already, then this POST will fail.
    # @param body Create agentless outbound messaging request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendAgentlessOutboundMessageResponse, Fixnum, Hash)>] SendAgentlessOutboundMessageResponse data, response status code and response headers
    def post_conversations_messages_agentless_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messages_agentless ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messages_agentless" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messages/agentless".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SendAgentlessOutboundMessageResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messages_agentless\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Facebook Integration
    # 
    # @param body FacebookIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [FacebookIntegration]
    def post_conversations_messaging_integrations_facebook(body, opts = {})
      data, _status_code, _headers = post_conversations_messaging_integrations_facebook_with_http_info(body, opts)
      return data
    end

    # Create a Facebook Integration
    # 
    # @param body FacebookIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(FacebookIntegration, Fixnum, Hash)>] FacebookIntegration data, response status code and response headers
    def post_conversations_messaging_integrations_facebook_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messaging_integrations_facebook ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messaging_integrations_facebook" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/facebook".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FacebookIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messaging_integrations_facebook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a LINE messenger Integration
    # 
    # @param body LineIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [LineIntegration]
    def post_conversations_messaging_integrations_line(body, opts = {})
      data, _status_code, _headers = post_conversations_messaging_integrations_line_with_http_info(body, opts)
      return data
    end

    # Create a LINE messenger Integration
    # 
    # @param body LineIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(LineIntegration, Fixnum, Hash)>] LineIntegration data, response status code and response headers
    def post_conversations_messaging_integrations_line_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messaging_integrations_line ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messaging_integrations_line" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/line".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LineIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messaging_integrations_line\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Twitter Integration
    # 
    # @param body TwitterIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [TwitterIntegration]
    def post_conversations_messaging_integrations_twitter(body, opts = {})
      data, _status_code, _headers = post_conversations_messaging_integrations_twitter_with_http_info(body, opts)
      return data
    end

    # Create a Twitter Integration
    # 
    # @param body TwitterIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(TwitterIntegration, Fixnum, Hash)>] TwitterIntegration data, response status code and response headers
    def post_conversations_messaging_integrations_twitter_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messaging_integrations_twitter ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messaging_integrations_twitter" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/twitter".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TwitterIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messaging_integrations_twitter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a WhatsApp Integration
    # You must be approved by WhatsApp to use this feature. Your approved e164-formatted phone number and valid WhatsApp certificate for your number are required. Your WhatsApp certificate must have valid base64 encoding. Please paste carefully and do not add any leading or trailing spaces. Do not alter any characters. An integration must be activated within 7 days of certificate generation. If you cannot complete the addition and activation of the number within 7 days, please obtain a new certificate before creating the integration. Integrations created with an invalid number or certificate may immediately incur additional integration fees. Please carefully enter your number and certificate as described.
    # @param body WhatsAppIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [WhatsAppIntegration]
    def post_conversations_messaging_integrations_whatsapp(body, opts = {})
      data, _status_code, _headers = post_conversations_messaging_integrations_whatsapp_with_http_info(body, opts)
      return data
    end

    # Create a WhatsApp Integration
    # You must be approved by WhatsApp to use this feature. Your approved e164-formatted phone number and valid WhatsApp certificate for your number are required. Your WhatsApp certificate must have valid base64 encoding. Please paste carefully and do not add any leading or trailing spaces. Do not alter any characters. An integration must be activated within 7 days of certificate generation. If you cannot complete the addition and activation of the number within 7 days, please obtain a new certificate before creating the integration. Integrations created with an invalid number or certificate may immediately incur additional integration fees. Please carefully enter your number and certificate as described.
    # @param body WhatsAppIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsAppIntegration, Fixnum, Hash)>] WhatsAppIntegration data, response status code and response headers
    def post_conversations_messaging_integrations_whatsapp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.post_conversations_messaging_integrations_whatsapp ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.post_conversations_messaging_integrations_whatsapp" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/whatsapp".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WhatsAppIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#post_conversations_messaging_integrations_whatsapp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set flagged reason on conversation participant to indicate bad conversation quality.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def put_conversation_participant_flaggedreason(conversation_id, participant_id, opts = {})
      put_conversation_participant_flaggedreason_with_http_info(conversation_id, participant_id, opts)
      return nil
    end

    # Set flagged reason on conversation participant to indicate bad conversation quality.
    # 
    # @param conversation_id conversation ID
    # @param participant_id participant ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def put_conversation_participant_flaggedreason_with_http_info(conversation_id, participant_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.put_conversation_participant_flaggedreason ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.put_conversation_participant_flaggedreason" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.put_conversation_participant_flaggedreason" if participant_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/{conversationId}/participants/{participantId}/flaggedreason".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#put_conversation_participant_flaggedreason\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set uuiData to be sent on future commands.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body UUIData Request
    # @param [Hash] opts the optional parameters
    # @return [Empty]
    def put_conversations_call_participant_communication_uuidata(conversation_id, participant_id, communication_id, body, opts = {})
      data, _status_code, _headers = put_conversations_call_participant_communication_uuidata_with_http_info(conversation_id, participant_id, communication_id, body, opts)
      return data
    end

    # Set uuiData to be sent on future commands.
    # 
    # @param conversation_id conversationId
    # @param participant_id participantId
    # @param communication_id communicationId
    # @param body UUIData Request
    # @param [Hash] opts the optional parameters
    # @return [Array<(Empty, Fixnum, Hash)>] Empty data, response status code and response headers
    def put_conversations_call_participant_communication_uuidata_with_http_info(conversation_id, participant_id, communication_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.put_conversations_call_participant_communication_uuidata ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.put_conversations_call_participant_communication_uuidata" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'participant_id' is set
      fail ArgumentError, "Missing the required parameter 'participant_id' when calling ConversationsApi.put_conversations_call_participant_communication_uuidata" if participant_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling ConversationsApi.put_conversations_call_participant_communication_uuidata" if communication_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.put_conversations_call_participant_communication_uuidata" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/calls/{conversationId}/participants/{participantId}/communications/{communicationId}/uuidata".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'participantId' + '}', participant_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Empty')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#put_conversations_call_participant_communication_uuidata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update conversation draft reply
    # 
    # @param conversation_id conversationId
    # @param body Draft
    # @param [Hash] opts the optional parameters
    # @return [EmailMessage]
    def put_conversations_email_messages_draft(conversation_id, body, opts = {})
      data, _status_code, _headers = put_conversations_email_messages_draft_with_http_info(conversation_id, body, opts)
      return data
    end

    # Update conversation draft reply
    # 
    # @param conversation_id conversationId
    # @param body Draft
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailMessage, Fixnum, Hash)>] EmailMessage data, response status code and response headers
    def put_conversations_email_messages_draft_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.put_conversations_email_messages_draft ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.put_conversations_email_messages_draft" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.put_conversations_email_messages_draft" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/emails/{conversationId}/messages/draft".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#put_conversations_email_messages_draft\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param body LineIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [LineIntegration]
    def put_conversations_messaging_integrations_line_integration_id(integration_id, body, opts = {})
      data, _status_code, _headers = put_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, body, opts)
      return data
    end

    # Update a LINE messenger integration
    # 
    # @param integration_id Integration ID
    # @param body LineIntegrationRequest
    # @param [Hash] opts the optional parameters
    # @return [Array<(LineIntegration, Fixnum, Hash)>] LineIntegration data, response status code and response headers
    def put_conversations_messaging_integrations_line_integration_id_with_http_info(integration_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.put_conversations_messaging_integrations_line_integration_id ..."
      end
      
      
      # verify the required parameter 'integration_id' is set
      fail ArgumentError, "Missing the required parameter 'integration_id' when calling ConversationsApi.put_conversations_messaging_integrations_line_integration_id" if integration_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling ConversationsApi.put_conversations_messaging_integrations_line_integration_id" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/conversations/messaging/integrations/line/{integrationId}".sub('{format}','json').sub('{' + 'integrationId' + '}', integration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LineIntegration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#put_conversations_messaging_integrations_line_integration_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
