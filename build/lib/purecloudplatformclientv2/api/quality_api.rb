=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class QualityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a calibration by id.
    # 
    # @param calibration_id Calibration ID
    # @param calibrator_id calibratorId
    # @param [Hash] opts the optional parameters
    # @return [Calibration]
    def delete_quality_calibration(calibration_id, calibrator_id, opts = {})
      data, _status_code, _headers = delete_quality_calibration_with_http_info(calibration_id, calibrator_id, opts)
      return data
    end

    # Delete a calibration by id.
    # 
    # @param calibration_id Calibration ID
    # @param calibrator_id calibratorId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Calibration, Fixnum, Hash)>] Calibration data, response status code and response headers
    def delete_quality_calibration_with_http_info(calibration_id, calibrator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_calibration ..."
      end
      
      
      # verify the required parameter 'calibration_id' is set
      fail ArgumentError, "Missing the required parameter 'calibration_id' when calling QualityApi.delete_quality_calibration" if calibration_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'calibrator_id' is set
      fail ArgumentError, "Missing the required parameter 'calibrator_id' when calling QualityApi.delete_quality_calibration" if calibrator_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/calibrations/{calibrationId}".sub('{format}','json').sub('{' + 'calibrationId' + '}', calibration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'calibratorId'] = calibrator_id

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Calibration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_calibration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an evaluation
    # 
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Evaluation]
    def delete_quality_conversation_evaluation(conversation_id, evaluation_id, opts = {})
      data, _status_code, _headers = delete_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, opts)
      return data
    end

    # Delete an evaluation
    # 
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Array<(Evaluation, Fixnum, Hash)>] Evaluation data, response status code and response headers
    def delete_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_conversation_evaluation ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.delete_quality_conversation_evaluation" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'evaluation_id' is set
      fail ArgumentError, "Missing the required parameter 'evaluation_id' when calling QualityApi.delete_quality_conversation_evaluation" if evaluation_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'evaluationId' + '}', evaluation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Evaluation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_conversation_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_quality_form(form_id, opts = {})
      delete_quality_form_with_http_info(form_id, opts)
      return nil
    end

    # Delete an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_quality_form_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_form ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.delete_quality_form" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_quality_forms_evaluation(form_id, opts = {})
      delete_quality_forms_evaluation_with_http_info(form_id, opts)
      return nil
    end

    # Delete an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_quality_forms_evaluation_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_forms_evaluation ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.delete_quality_forms_evaluation" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_forms_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a survey form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_quality_forms_survey(form_id, opts = {})
      delete_quality_forms_survey_with_http_info(form_id, opts)
      return nil
    end

    # Delete a survey form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_quality_forms_survey_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_forms_survey ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.delete_quality_forms_survey" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_forms_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a keywordSet by id.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_quality_keywordset(keyword_set_id, opts = {})
      delete_quality_keywordset_with_http_info(keyword_set_id, opts)
      return nil
    end

    # Delete a keywordSet by id.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_quality_keywordset_with_http_info(keyword_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_keywordset ..."
      end
      
      
      # verify the required parameter 'keyword_set_id' is set
      fail ArgumentError, "Missing the required parameter 'keyword_set_id' when calling QualityApi.delete_quality_keywordset" if keyword_set_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets/{keywordSetId}".sub('{format}','json').sub('{' + 'keywordSetId' + '}', keyword_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_keywordset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete keyword sets
    # Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
    # @param ids A comma-delimited list of valid KeywordSet ids
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_quality_keywordsets(ids, opts = {})
      delete_quality_keywordsets_with_http_info(ids, opts)
      return nil
    end

    # Delete keyword sets
    # Bulk delete of keyword sets; this will only delete the keyword sets that match the ids specified in the query param.
    # @param ids A comma-delimited list of valid KeywordSet ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_quality_keywordsets_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.delete_quality_keywordsets ..."
      end
      
      
      # verify the required parameter 'ids' is set
      fail ArgumentError, "Missing the required parameter 'ids' when calling QualityApi.delete_quality_keywordsets" if ids.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'ids'] = ids

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#delete_quality_keywordsets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of Agent Activities
    # Including the number of evaluations and average evaluation score
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [DateTime] :start_time Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [Array<String>] :agent_user_id user id of agent requested
    # @option opts [String] :evaluator_user_id user id of the evaluator
    # @option opts [String] :name name
    # @option opts [String] :group group id
    # @return [AgentActivityEntityListing]
    def get_quality_agents_activity(opts = {})
      data, _status_code, _headers = get_quality_agents_activity_with_http_info(opts)
      return data
    end

    # Gets a list of Agent Activities
    # Including the number of evaluations and average evaluation score
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [DateTime] :start_time Start time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time End time of agent activity. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [Array<String>] :agent_user_id user id of agent requested
    # @option opts [String] :evaluator_user_id user id of the evaluator
    # @option opts [String] :name name
    # @option opts [String] :group group id
    # @return [Array<(AgentActivityEntityListing, Fixnum, Hash)>] AgentActivityEntityListing data, response status code and response headers
    def get_quality_agents_activity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_agents_activity ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/agents/activity".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'agentUserId'] = @api_client.build_collection_param(opts[:'agent_user_id'], :multi) if opts[:'agent_user_id']
      query_params[:'evaluatorUserId'] = opts[:'evaluator_user_id'] if opts[:'evaluator_user_id']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'group'] = opts[:'group'] if opts[:'group']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AgentActivityEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_agents_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a calibration by id.  Requires either calibrator id or conversation id
    # 
    # @param calibration_id Calibration ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :calibrator_id calibratorId
    # @option opts [String] :conversation_id conversationId
    # @return [Calibration]
    def get_quality_calibration(calibration_id, opts = {})
      data, _status_code, _headers = get_quality_calibration_with_http_info(calibration_id, opts)
      return data
    end

    # Get a calibration by id.  Requires either calibrator id or conversation id
    # 
    # @param calibration_id Calibration ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :calibrator_id calibratorId
    # @option opts [String] :conversation_id conversationId
    # @return [Array<(Calibration, Fixnum, Hash)>] Calibration data, response status code and response headers
    def get_quality_calibration_with_http_info(calibration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_calibration ..."
      end
      
      
      # verify the required parameter 'calibration_id' is set
      fail ArgumentError, "Missing the required parameter 'calibration_id' when calling QualityApi.get_quality_calibration" if calibration_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/calibrations/{calibrationId}".sub('{format}','json').sub('{' + 'calibrationId' + '}', calibration_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'calibratorId'] = opts[:'calibrator_id'] if opts[:'calibrator_id']
      query_params[:'conversationId'] = opts[:'conversation_id'] if opts[:'conversation_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Calibration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_calibration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of calibrations
    # 
    # @param calibrator_id user id of calibrator
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :conversation_id conversation id
    # @option opts [DateTime] :start_time Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @return [CalibrationEntityListing]
    def get_quality_calibrations(calibrator_id, opts = {})
      data, _status_code, _headers = get_quality_calibrations_with_http_info(calibrator_id, opts)
      return data
    end

    # Get the list of calibrations
    # 
    # @param calibrator_id user id of calibrator
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :conversation_id conversation id
    # @option opts [DateTime] :start_time Beginning of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time end of the calibration query. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @return [Array<(CalibrationEntityListing, Fixnum, Hash)>] CalibrationEntityListing data, response status code and response headers
    def get_quality_calibrations_with_http_info(calibrator_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_calibrations ..."
      end
      
      
      # verify the required parameter 'calibrator_id' is set
      fail ArgumentError, "Missing the required parameter 'calibrator_id' when calling QualityApi.get_quality_calibrations" if calibrator_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/calibrations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'calibratorId'] = calibrator_id
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'conversationId'] = opts[:'conversation_id'] if opts[:'conversation_id']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CalibrationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_calibrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get audits for conversation or recording
    # Different permissions are required for viewing different resource audit entries.  The quality:evaluation:viewAudit permission is required to view evaluation audits, the recording:recording:viewAudit permission is required to view recording audits, and so on.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :recording_id id of the recording
    # @option opts [String] :entity_type entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording (default to Recording)
    # @return [QualityAuditPage]
    def get_quality_conversation_audits(conversation_id, opts = {})
      data, _status_code, _headers = get_quality_conversation_audits_with_http_info(conversation_id, opts)
      return data
    end

    # Get audits for conversation or recording
    # Different permissions are required for viewing different resource audit entries.  The quality:evaluation:viewAudit permission is required to view evaluation audits, the recording:recording:viewAudit permission is required to view recording audits, and so on.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :recording_id id of the recording
    # @option opts [String] :entity_type entity type options: Recording, Calibration, Evaluation, Annotation, Screen_Recording
    # @return [Array<(QualityAuditPage, Fixnum, Hash)>] QualityAuditPage data, response status code and response headers
    def get_quality_conversation_audits_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_conversation_audits ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.get_quality_conversation_audits" if conversation_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/audits".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'recordingId'] = opts[:'recording_id'] if opts[:'recording_id']
      query_params[:'entityType'] = opts[:'entity_type'] if opts[:'entity_type']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QualityAuditPage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_conversation_audits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an evaluation
    # 
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand agent, evaluator, evaluationForm
    # @return [Evaluation]
    def get_quality_conversation_evaluation(conversation_id, evaluation_id, opts = {})
      data, _status_code, _headers = get_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, opts)
      return data
    end

    # Get an evaluation
    # 
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand agent, evaluator, evaluationForm
    # @return [Array<(Evaluation, Fixnum, Hash)>] Evaluation data, response status code and response headers
    def get_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_conversation_evaluation ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.get_quality_conversation_evaluation" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'evaluation_id' is set
      fail ArgumentError, "Missing the required parameter 'evaluation_id' when calling QualityApi.get_quality_conversation_evaluation" if evaluation_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'evaluationId' + '}', evaluation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Evaluation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_conversation_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the surveys for a conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<Survey>]
    def get_quality_conversation_surveys(conversation_id, opts = {})
      data, _status_code, _headers = get_quality_conversation_surveys_with_http_info(conversation_id, opts)
      return data
    end

    # Get the surveys for a conversation
    # 
    # @param conversation_id conversationId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Survey>, Fixnum, Hash)>] Array<Survey> data, response status code and response headers
    def get_quality_conversation_surveys_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_conversation_surveys ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.get_quality_conversation_surveys" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/surveys".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Survey>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_conversation_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Queries Evaluations and returns a paged list
    # Query params must include one of conversationId, evaluatorUserId, or agentUserId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :conversation_id conversationId specified
    # @option opts [String] :agent_user_id user id of the agent
    # @option opts [String] :evaluator_user_id evaluator user id
    # @option opts [String] :queue_id queue id
    # @option opts [String] :start_time start time of the evaluation query
    # @option opts [String] :end_time end time of the evaluation query
    # @option opts [Array<String>] :evaluation_state 
    # @option opts [BOOLEAN] :is_released the evaluation has been released
    # @option opts [BOOLEAN] :agent_has_read agent has the evaluation
    # @option opts [BOOLEAN] :expand_answer_total_scores get the total scores for evaluations
    # @option opts [Integer] :maximum maximum
    # @option opts [String] :sort_order sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39;
    # @return [EvaluationEntityListing]
    def get_quality_evaluations_query(opts = {})
      data, _status_code, _headers = get_quality_evaluations_query_with_http_info(opts)
      return data
    end

    # Queries Evaluations and returns a paged list
    # Query params must include one of conversationId, evaluatorUserId, or agentUserId
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :conversation_id conversationId specified
    # @option opts [String] :agent_user_id user id of the agent
    # @option opts [String] :evaluator_user_id evaluator user id
    # @option opts [String] :queue_id queue id
    # @option opts [String] :start_time start time of the evaluation query
    # @option opts [String] :end_time end time of the evaluation query
    # @option opts [Array<String>] :evaluation_state 
    # @option opts [BOOLEAN] :is_released the evaluation has been released
    # @option opts [BOOLEAN] :agent_has_read agent has the evaluation
    # @option opts [BOOLEAN] :expand_answer_total_scores get the total scores for evaluations
    # @option opts [Integer] :maximum maximum
    # @option opts [String] :sort_order sort order options for agentUserId or evaluatorUserId query. Valid options are &#39;a&#39;, &#39;asc&#39;, &#39;ascending&#39;, &#39;d&#39;, &#39;desc&#39;, &#39;descending&#39;
    # @return [Array<(EvaluationEntityListing, Fixnum, Hash)>] EvaluationEntityListing data, response status code and response headers
    def get_quality_evaluations_query_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_evaluations_query ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/evaluations/query".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'conversationId'] = opts[:'conversation_id'] if opts[:'conversation_id']
      query_params[:'agentUserId'] = opts[:'agent_user_id'] if opts[:'agent_user_id']
      query_params[:'evaluatorUserId'] = opts[:'evaluator_user_id'] if opts[:'evaluator_user_id']
      query_params[:'queueId'] = opts[:'queue_id'] if opts[:'queue_id']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'evaluationState'] = @api_client.build_collection_param(opts[:'evaluation_state'], :multi) if opts[:'evaluation_state']
      query_params[:'isReleased'] = opts[:'is_released'] if opts[:'is_released']
      query_params[:'agentHasRead'] = opts[:'agent_has_read'] if opts[:'agent_has_read']
      query_params[:'expandAnswerTotalScores'] = opts[:'expand_answer_total_scores'] if opts[:'expand_answer_total_scores']
      query_params[:'maximum'] = opts[:'maximum'] if opts[:'maximum']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_evaluations_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an evaluator activity
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [DateTime] :start_time The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [String] :name Evaluator name
    # @option opts [Array<String>] :permission permission strings
    # @option opts [String] :group group id
    # @return [EvaluatorActivityEntityListing]
    def get_quality_evaluators_activity(opts = {})
      data, _status_code, _headers = get_quality_evaluators_activity_with_http_info(opts)
      return data
    end

    # Get an evaluator activity
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [DateTime] :start_time The start time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [DateTime] :end_time The end time specified. Date time is represented as an ISO-8601 string. For example: yyyy-MM-ddTHH:mm:ss.SSSZ
    # @option opts [String] :name Evaluator name
    # @option opts [Array<String>] :permission permission strings
    # @option opts [String] :group group id
    # @return [Array<(EvaluatorActivityEntityListing, Fixnum, Hash)>] EvaluatorActivityEntityListing data, response status code and response headers
    def get_quality_evaluators_activity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_evaluators_activity ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/evaluators/activity".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'startTime'] = opts[:'start_time'] if opts[:'start_time']
      query_params[:'endTime'] = opts[:'end_time'] if opts[:'end_time']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'permission'] = @api_client.build_collection_param(opts[:'permission'], :multi) if opts[:'permission']
      query_params[:'group'] = opts[:'group'] if opts[:'group']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluatorActivityEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_evaluators_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an evaluation form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def get_quality_form(form_id, opts = {})
      data, _status_code, _headers = get_quality_form_with_http_info(form_id, opts)
      return data
    end

    # Get an evaluation form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def get_quality_form_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_form ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_form" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the revisions for a specific evaluation.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [EvaluationFormEntityListing]
    def get_quality_form_versions(form_id, opts = {})
      data, _status_code, _headers = get_quality_form_versions_with_http_info(form_id, opts)
      return data
    end

    # Gets all the revisions for a specific evaluation.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_form_versions_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_form_versions ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_form_versions" if form_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/{formId}/versions".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_form_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of evaluation forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [EvaluationFormEntityListing]
    def get_quality_forms(opts = {})
      data, _status_code, _headers = get_quality_forms_with_http_info(opts)
      return data
    end

    # Get the list of evaluation forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_forms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an evaluation form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def get_quality_forms_evaluation(form_id, opts = {})
      data, _status_code, _headers = get_quality_forms_evaluation_with_http_info(form_id, opts)
      return data
    end

    # Get an evaluation form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def get_quality_forms_evaluation_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_evaluation ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_forms_evaluation" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the revisions for a specific evaluation.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [EvaluationFormEntityListing]
    def get_quality_forms_evaluation_versions(form_id, opts = {})
      data, _status_code, _headers = get_quality_forms_evaluation_versions_with_http_info(form_id, opts)
      return data
    end

    # Gets all the revisions for a specific evaluation.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_forms_evaluation_versions_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_evaluation_versions ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_forms_evaluation_versions" if form_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations/{formId}/versions".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_evaluation_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of evaluation forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [EvaluationFormEntityListing]
    def get_quality_forms_evaluations(opts = {})
      data, _status_code, _headers = get_quality_forms_evaluations_with_http_info(opts)
      return data
    end

    # Get the list of evaluation forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_forms_evaluations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_evaluations ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_evaluations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a survey form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def get_quality_forms_survey(form_id, opts = {})
      data, _status_code, _headers = get_quality_forms_survey_with_http_info(form_id, opts)
      return data
    end

    # Get a survey form
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def get_quality_forms_survey_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_survey ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_forms_survey" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all the revisions for a specific survey.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [SurveyFormEntityListing]
    def get_quality_forms_survey_versions(form_id, opts = {})
      data, _status_code, _headers = get_quality_forms_survey_versions_with_http_info(form_id, opts)
      return data
    end

    # Gets all the revisions for a specific survey.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(SurveyFormEntityListing, Fixnum, Hash)>] SurveyFormEntityListing data, response status code and response headers
    def get_quality_forms_survey_versions_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_survey_versions ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_forms_survey_versions" if form_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/{formId}/versions".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_survey_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of survey forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [SurveyFormEntityListing]
    def get_quality_forms_surveys(opts = {})
      data, _status_code, _headers = get_quality_forms_surveys_with_http_info(opts)
      return data
    end

    # Get the list of survey forms
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :expand Expand
    # @option opts [String] :name Name
    # @option opts [String] :sort_order Order to sort results, either asc or desc
    # @return [Array<(SurveyFormEntityListing, Fixnum, Hash)>] SurveyFormEntityListing data, response status code and response headers
    def get_quality_forms_surveys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_surveys ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of survey forms by their ids
    # 
    # @param id A comma-delimited list of valid survey form ids
    # @param [Hash] opts the optional parameters
    # @return [SurveyFormEntityListing]
    def get_quality_forms_surveys_bulk(id, opts = {})
      data, _status_code, _headers = get_quality_forms_surveys_bulk_with_http_info(id, opts)
      return data
    end

    # Retrieve a list of survey forms by their ids
    # 
    # @param id A comma-delimited list of valid survey form ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyFormEntityListing, Fixnum, Hash)>] SurveyFormEntityListing data, response status code and response headers
    def get_quality_forms_surveys_bulk_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_surveys_bulk ..."
      end
      
      
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling QualityApi.get_quality_forms_surveys_bulk" if id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/bulk".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'id'] = @api_client.build_collection_param(id, :multi)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_surveys_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a list of the latest form versions by context ids
    # 
    # @param context_id A comma-delimited list of valid survey form context ids
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :published If true, the latest published version will be included. If false, only the unpublished version will be included. (default to true)
    # @return [SurveyFormEntityListing]
    def get_quality_forms_surveys_bulk_contexts(context_id, opts = {})
      data, _status_code, _headers = get_quality_forms_surveys_bulk_contexts_with_http_info(context_id, opts)
      return data
    end

    # Retrieve a list of the latest form versions by context ids
    # 
    # @param context_id A comma-delimited list of valid survey form context ids
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :published If true, the latest published version will be included. If false, only the unpublished version will be included.
    # @return [Array<(SurveyFormEntityListing, Fixnum, Hash)>] SurveyFormEntityListing data, response status code and response headers
    def get_quality_forms_surveys_bulk_contexts_with_http_info(context_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_forms_surveys_bulk_contexts ..."
      end
      
      
      # verify the required parameter 'context_id' is set
      fail ArgumentError, "Missing the required parameter 'context_id' when calling QualityApi.get_quality_forms_surveys_bulk_contexts" if context_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/bulk/contexts".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'contextId'] = @api_client.build_collection_param(context_id, :multi)
      query_params[:'published'] = opts[:'published'] if opts[:'published']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_forms_surveys_bulk_contexts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a keywordSet by id.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param [Hash] opts the optional parameters
    # @return [KeywordSet]
    def get_quality_keywordset(keyword_set_id, opts = {})
      data, _status_code, _headers = get_quality_keywordset_with_http_info(keyword_set_id, opts)
      return data
    end

    # Get a keywordSet by id.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(KeywordSet, Fixnum, Hash)>] KeywordSet data, response status code and response headers
    def get_quality_keywordset_with_http_info(keyword_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_keywordset ..."
      end
      
      
      # verify the required parameter 'keyword_set_id' is set
      fail ArgumentError, "Missing the required parameter 'keyword_set_id' when calling QualityApi.get_quality_keywordset" if keyword_set_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets/{keywordSetId}".sub('{format}','json').sub('{' + 'keywordSetId' + '}', keyword_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_keywordset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of keyword sets
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested (default to 25)
    # @option opts [Integer] :page_number The page number requested (default to 1)
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :name the keyword set name - used for filtering results in searches.
    # @option opts [String] :queue_id the queue id - used for filtering results in searches.
    # @option opts [String] :agent_id the agent id - used for filtering results in searches.
    # @option opts [String] :operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters.
    # @return [KeywordSetEntityListing]
    def get_quality_keywordsets(opts = {})
      data, _status_code, _headers = get_quality_keywordsets_with_http_info(opts)
      return data
    end

    # Get the list of keyword sets
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size The total page size requested
    # @option opts [Integer] :page_number The page number requested
    # @option opts [String] :sort_by variable name requested to sort by
    # @option opts [Array<String>] :expand variable name requested by expand list
    # @option opts [String] :next_page next page token
    # @option opts [String] :previous_page Previous page token
    # @option opts [String] :name the keyword set name - used for filtering results in searches.
    # @option opts [String] :queue_id the queue id - used for filtering results in searches.
    # @option opts [String] :agent_id the agent id - used for filtering results in searches.
    # @option opts [String] :operator If agentID and queueId are both present, this determines whether the query is an AND or OR between those parameters.
    # @return [Array<(KeywordSetEntityListing, Fixnum, Hash)>] KeywordSetEntityListing data, response status code and response headers
    def get_quality_keywordsets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_keywordsets ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'operator'] && !['AND', 'OR'].include?(opts[:'operator'])
        fail ArgumentError, 'invalid value for "operator", must be one of AND, OR'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'nextPage'] = opts[:'next_page'] if opts[:'next_page']
      query_params[:'previousPage'] = opts[:'previous_page'] if opts[:'previous_page']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'queueId'] = opts[:'queue_id'] if opts[:'queue_id']
      query_params[:'agentId'] = opts[:'agent_id'] if opts[:'agent_id']
      query_params[:'operator'] = opts[:'operator'] if opts[:'operator']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordSetEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_keywordsets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the published evaluation forms.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def get_quality_publishedform(form_id, opts = {})
      data, _status_code, _headers = get_quality_publishedform_with_http_info(form_id, opts)
      return data
    end

    # Get the published evaluation forms.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def get_quality_publishedform_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedform ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_publishedform" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedform\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the published evaluation forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_per_context onlyLatestPerContext (default to false)
    # @return [EvaluationFormEntityListing]
    def get_quality_publishedforms(opts = {})
      data, _status_code, _headers = get_quality_publishedforms_with_http_info(opts)
      return data
    end

    # Get the published evaluation forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_per_context onlyLatestPerContext
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_publishedforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedforms ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'onlyLatestPerContext'] = opts[:'only_latest_per_context'] if opts[:'only_latest_per_context']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the most recent published version of an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def get_quality_publishedforms_evaluation(form_id, opts = {})
      data, _status_code, _headers = get_quality_publishedforms_evaluation_with_http_info(form_id, opts)
      return data
    end

    # Get the most recent published version of an evaluation form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def get_quality_publishedforms_evaluation_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedforms_evaluation ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_publishedforms_evaluation" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/evaluations/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedforms_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the published evaluation forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_per_context onlyLatestPerContext (default to false)
    # @return [EvaluationFormEntityListing]
    def get_quality_publishedforms_evaluations(opts = {})
      data, _status_code, _headers = get_quality_publishedforms_evaluations_with_http_info(opts)
      return data
    end

    # Get the published evaluation forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_per_context onlyLatestPerContext
    # @return [Array<(EvaluationFormEntityListing, Fixnum, Hash)>] EvaluationFormEntityListing data, response status code and response headers
    def get_quality_publishedforms_evaluations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedforms_evaluations ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/evaluations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'onlyLatestPerContext'] = opts[:'only_latest_per_context'] if opts[:'only_latest_per_context']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedforms_evaluations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the most recent published version of a survey form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def get_quality_publishedforms_survey(form_id, opts = {})
      data, _status_code, _headers = get_quality_publishedforms_survey_with_http_info(form_id, opts)
      return data
    end

    # Get the most recent published version of a survey form.
    # 
    # @param form_id Form ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def get_quality_publishedforms_survey_with_http_info(form_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedforms_survey ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.get_quality_publishedforms_survey" if form_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/surveys/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedforms_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the published survey forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_enabled_per_context onlyLatestEnabledPerContext (default to false)
    # @return [SurveyFormEntityListing]
    def get_quality_publishedforms_surveys(opts = {})
      data, _status_code, _headers = get_quality_publishedforms_surveys_with_http_info(opts)
      return data
    end

    # Get the published survey forms.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Name
    # @option opts [BOOLEAN] :only_latest_enabled_per_context onlyLatestEnabledPerContext
    # @return [Array<(SurveyFormEntityListing, Fixnum, Hash)>] SurveyFormEntityListing data, response status code and response headers
    def get_quality_publishedforms_surveys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_publishedforms_surveys ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/surveys".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'onlyLatestEnabledPerContext'] = opts[:'only_latest_enabled_per_context'] if opts[:'only_latest_enabled_per_context']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyFormEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_publishedforms_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a survey for a conversation
    # 
    # @param survey_id surveyId
    # @param [Hash] opts the optional parameters
    # @return [Survey]
    def get_quality_survey(survey_id, opts = {})
      data, _status_code, _headers = get_quality_survey_with_http_info(survey_id, opts)
      return data
    end

    # Get a survey for a conversation
    # 
    # @param survey_id surveyId
    # @param [Hash] opts the optional parameters
    # @return [Array<(Survey, Fixnum, Hash)>] Survey data, response status code and response headers
    def get_quality_survey_with_http_info(survey_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_survey ..."
      end
      
      
      # verify the required parameter 'survey_id' is set
      fail ArgumentError, "Missing the required parameter 'survey_id' when calling QualityApi.get_quality_survey" if survey_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/surveys/{surveyId}".sub('{format}','json').sub('{' + 'surveyId' + '}', survey_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Survey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a survey as an end-customer, for the purposes of scoring it.
    # 
    # @param customer_survey_url customerSurveyUrl
    # @param [Hash] opts the optional parameters
    # @return [ScorableSurvey]
    def get_quality_surveys_scorable(customer_survey_url, opts = {})
      data, _status_code, _headers = get_quality_surveys_scorable_with_http_info(customer_survey_url, opts)
      return data
    end

    # Get a survey as an end-customer, for the purposes of scoring it.
    # 
    # @param customer_survey_url customerSurveyUrl
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScorableSurvey, Fixnum, Hash)>] ScorableSurvey data, response status code and response headers
    def get_quality_surveys_scorable_with_http_info(customer_survey_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.get_quality_surveys_scorable ..."
      end
      
      
      # verify the required parameter 'customer_survey_url' is set
      fail ArgumentError, "Missing the required parameter 'customer_survey_url' when calling QualityApi.get_quality_surveys_scorable" if customer_survey_url.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/surveys/scorable".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'customerSurveyUrl'] = customer_survey_url

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScorableSurvey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#get_quality_surveys_scorable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
    # 
    # @param form_id Form ID
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def patch_quality_forms_survey(form_id, body, opts = {})
      data, _status_code, _headers = patch_quality_forms_survey_with_http_info(form_id, body, opts)
      return data
    end

    # Disable a particular version of a survey form and invalidates any invitations that have already been sent to customers using this version of the form.
    # 
    # @param form_id Form ID
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def patch_quality_forms_survey_with_http_info(form_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.patch_quality_forms_survey ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.patch_quality_forms_survey" if form_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.patch_quality_forms_survey" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#patch_quality_forms_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for evaluation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [EvaluationAggregateQueryResponse]
    def post_analytics_evaluations_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_evaluations_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for evaluation aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationAggregateQueryResponse, Fixnum, Hash)>] EvaluationAggregateQueryResponse data, response status code and response headers
    def post_analytics_evaluations_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_analytics_evaluations_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_analytics_evaluations_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/evaluations/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationAggregateQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_analytics_evaluations_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for survey aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [SurveyAggregateQueryResponse]
    def post_analytics_surveys_aggregates_query(body, opts = {})
      data, _status_code, _headers = post_analytics_surveys_aggregates_query_with_http_info(body, opts)
      return data
    end

    # Query for survey aggregates
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyAggregateQueryResponse, Fixnum, Hash)>] SurveyAggregateQueryResponse data, response status code and response headers
    def post_analytics_surveys_aggregates_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_analytics_surveys_aggregates_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_analytics_surveys_aggregates_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/surveys/aggregates/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyAggregateQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_analytics_surveys_aggregates_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a calibration
    # 
    # @param body calibration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand calibratorId
    # @return [Calibration]
    def post_quality_calibrations(body, opts = {})
      data, _status_code, _headers = post_quality_calibrations_with_http_info(body, opts)
      return data
    end

    # Create a calibration
    # 
    # @param body calibration
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand calibratorId
    # @return [Array<(Calibration, Fixnum, Hash)>] Calibration data, response status code and response headers
    def post_quality_calibrations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_calibrations ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_calibrations" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/calibrations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Calibration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_calibrations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an evaluation
    # 
    # @param conversation_id conversationId
    # @param body evaluation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Evaluation]
    def post_quality_conversation_evaluations(conversation_id, body, opts = {})
      data, _status_code, _headers = post_quality_conversation_evaluations_with_http_info(conversation_id, body, opts)
      return data
    end

    # Create an evaluation
    # 
    # @param conversation_id conversationId
    # @param body evaluation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Array<(Evaluation, Fixnum, Hash)>] Evaluation data, response status code and response headers
    def post_quality_conversation_evaluations_with_http_info(conversation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_conversation_evaluations ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.post_quality_conversation_evaluations" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_conversation_evaluations" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/evaluations".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Evaluation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_conversation_evaluations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score evaluation
    # 
    # @param body evaluationAndScoringSet
    # @param [Hash] opts the optional parameters
    # @return [EvaluationScoringSet]
    def post_quality_evaluations_scoring(body, opts = {})
      data, _status_code, _headers = post_quality_evaluations_scoring_with_http_info(body, opts)
      return data
    end

    # Score evaluation
    # 
    # @param body evaluationAndScoringSet
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationScoringSet, Fixnum, Hash)>] EvaluationScoringSet data, response status code and response headers
    def post_quality_evaluations_scoring_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_evaluations_scoring ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_evaluations_scoring" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/evaluations/scoring".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationScoringSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_evaluations_scoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an evaluation form.
    # 
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def post_quality_forms(body, opts = {})
      data, _status_code, _headers = post_quality_forms_with_http_info(body, opts)
      return data
    end

    # Create an evaluation form.
    # 
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def post_quality_forms_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_forms ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_forms" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an evaluation form.
    # 
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def post_quality_forms_evaluations(body, opts = {})
      data, _status_code, _headers = post_quality_forms_evaluations_with_http_info(body, opts)
      return data
    end

    # Create an evaluation form.
    # 
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def post_quality_forms_evaluations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_forms_evaluations ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_forms_evaluations" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_forms_evaluations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a survey form.
    # 
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def post_quality_forms_surveys(body, opts = {})
      data, _status_code, _headers = post_quality_forms_surveys_with_http_info(body, opts)
      return data
    end

    # Create a survey form.
    # 
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def post_quality_forms_surveys_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_forms_surveys ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_forms_surveys" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_forms_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a Keyword Set
    # 
    # @param body keywordSet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand queueId
    # @return [KeywordSet]
    def post_quality_keywordsets(body, opts = {})
      data, _status_code, _headers = post_quality_keywordsets_with_http_info(body, opts)
      return data
    end

    # Create a Keyword Set
    # 
    # @param body keywordSet
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand queueId
    # @return [Array<(KeywordSet, Fixnum, Hash)>] KeywordSet data, response status code and response headers
    def post_quality_keywordsets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_keywordsets ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_keywordsets" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_keywordsets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish an evaluation form.
    # 
    # @param body Publish request containing id of form to publish
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def post_quality_publishedforms(body, opts = {})
      data, _status_code, _headers = post_quality_publishedforms_with_http_info(body, opts)
      return data
    end

    # Publish an evaluation form.
    # 
    # @param body Publish request containing id of form to publish
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def post_quality_publishedforms_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_publishedforms ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_publishedforms" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_publishedforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish an evaluation form.
    # 
    # @param body Publish request containing id of form to publish
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def post_quality_publishedforms_evaluations(body, opts = {})
      data, _status_code, _headers = post_quality_publishedforms_evaluations_with_http_info(body, opts)
      return data
    end

    # Publish an evaluation form.
    # 
    # @param body Publish request containing id of form to publish
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def post_quality_publishedforms_evaluations_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_publishedforms_evaluations ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_publishedforms_evaluations" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/evaluations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_publishedforms_evaluations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish a survey form.
    # 
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def post_quality_publishedforms_surveys(body, opts = {})
      data, _status_code, _headers = post_quality_publishedforms_surveys_with_http_info(body, opts)
      return data
    end

    # Publish a survey form.
    # 
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def post_quality_publishedforms_surveys_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_publishedforms_surveys ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_publishedforms_surveys" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/publishedforms/surveys".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_publishedforms_surveys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the spotability statistic
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordSet] :body Keyword Set
    # @return [KeywordSet]
    def post_quality_spotability(opts = {})
      data, _status_code, _headers = post_quality_spotability_with_http_info(opts)
      return data
    end

    # Retrieve the spotability statistic
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [KeywordSet] :body Keyword Set
    # @return [Array<(KeywordSet, Fixnum, Hash)>] KeywordSet data, response status code and response headers
    def post_quality_spotability_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_spotability ..."
      end
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/spotability".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_spotability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score survey
    # 
    # @param body surveyAndScoringSet
    # @param [Hash] opts the optional parameters
    # @return [SurveyScoringSet]
    def post_quality_surveys_scoring(body, opts = {})
      data, _status_code, _headers = post_quality_surveys_scoring_with_http_info(body, opts)
      return data
    end

    # Score survey
    # 
    # @param body surveyAndScoringSet
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyScoringSet, Fixnum, Hash)>] SurveyScoringSet data, response status code and response headers
    def post_quality_surveys_scoring_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.post_quality_surveys_scoring ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.post_quality_surveys_scoring" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/surveys/scoring".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyScoringSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#post_quality_surveys_scoring\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
    # 
    # @param calibration_id Calibration ID
    # @param body Calibration
    # @param [Hash] opts the optional parameters
    # @return [Calibration]
    def put_quality_calibration(calibration_id, body, opts = {})
      data, _status_code, _headers = put_quality_calibration_with_http_info(calibration_id, body, opts)
      return data
    end

    # Update a calibration to the specified calibration via PUT.  Editable fields include: evaluators, expertEvaluator, and scoringIndex
    # 
    # @param calibration_id Calibration ID
    # @param body Calibration
    # @param [Hash] opts the optional parameters
    # @return [Array<(Calibration, Fixnum, Hash)>] Calibration data, response status code and response headers
    def put_quality_calibration_with_http_info(calibration_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_calibration ..."
      end
      
      
      # verify the required parameter 'calibration_id' is set
      fail ArgumentError, "Missing the required parameter 'calibration_id' when calling QualityApi.put_quality_calibration" if calibration_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_calibration" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/calibrations/{calibrationId}".sub('{format}','json').sub('{' + 'calibrationId' + '}', calibration_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Calibration')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_calibration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an evaluation
    # The quality:evaluation:edit permission allows modification of most fields, while the quality:evaluation:editScore permission allows an evaluator to change just the question scores, and the quality:evaluation:editAgentSignoff permission allows an agent to change the agent comments and sign off on the evaluation.
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param body evaluation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Evaluation]
    def put_quality_conversation_evaluation(conversation_id, evaluation_id, body, opts = {})
      data, _status_code, _headers = put_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, body, opts)
      return data
    end

    # Update an evaluation
    # The quality:evaluation:edit permission allows modification of most fields, while the quality:evaluation:editScore permission allows an evaluator to change just the question scores, and the quality:evaluation:editAgentSignoff permission allows an agent to change the agent comments and sign off on the evaluation.
    # @param conversation_id conversationId
    # @param evaluation_id evaluationId
    # @param body evaluation
    # @param [Hash] opts the optional parameters
    # @option opts [String] :expand evaluatorId
    # @return [Array<(Evaluation, Fixnum, Hash)>] Evaluation data, response status code and response headers
    def put_quality_conversation_evaluation_with_http_info(conversation_id, evaluation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_conversation_evaluation ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling QualityApi.put_quality_conversation_evaluation" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'evaluation_id' is set
      fail ArgumentError, "Missing the required parameter 'evaluation_id' when calling QualityApi.put_quality_conversation_evaluation" if evaluation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_conversation_evaluation" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/conversations/{conversationId}/evaluations/{evaluationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'evaluationId' + '}', evaluation_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if opts[:'expand']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Evaluation')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_conversation_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an evaluation form.
    # 
    # @param form_id Form ID
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def put_quality_form(form_id, body, opts = {})
      data, _status_code, _headers = put_quality_form_with_http_info(form_id, body, opts)
      return data
    end

    # Update an evaluation form.
    # 
    # @param form_id Form ID
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def put_quality_form_with_http_info(form_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_form ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.put_quality_form" if form_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_form" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_form\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an evaluation form.
    # 
    # @param form_id Form ID
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [EvaluationForm]
    def put_quality_forms_evaluation(form_id, body, opts = {})
      data, _status_code, _headers = put_quality_forms_evaluation_with_http_info(form_id, body, opts)
      return data
    end

    # Update an evaluation form.
    # 
    # @param form_id Form ID
    # @param body Evaluation form
    # @param [Hash] opts the optional parameters
    # @return [Array<(EvaluationForm, Fixnum, Hash)>] EvaluationForm data, response status code and response headers
    def put_quality_forms_evaluation_with_http_info(form_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_forms_evaluation ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.put_quality_forms_evaluation" if form_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_forms_evaluation" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/evaluations/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EvaluationForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_forms_evaluation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a survey form.
    # 
    # @param form_id Form ID
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [SurveyForm]
    def put_quality_forms_survey(form_id, body, opts = {})
      data, _status_code, _headers = put_quality_forms_survey_with_http_info(form_id, body, opts)
      return data
    end

    # Update a survey form.
    # 
    # @param form_id Form ID
    # @param body Survey form
    # @param [Hash] opts the optional parameters
    # @return [Array<(SurveyForm, Fixnum, Hash)>] SurveyForm data, response status code and response headers
    def put_quality_forms_survey_with_http_info(form_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_forms_survey ..."
      end
      
      
      # verify the required parameter 'form_id' is set
      fail ArgumentError, "Missing the required parameter 'form_id' when calling QualityApi.put_quality_forms_survey" if form_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_forms_survey" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/forms/surveys/{formId}".sub('{format}','json').sub('{' + 'formId' + '}', form_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SurveyForm')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_forms_survey\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a keywordSet to the specified keywordSet via PUT.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param body keywordSet
    # @param [Hash] opts the optional parameters
    # @return [KeywordSet]
    def put_quality_keywordset(keyword_set_id, body, opts = {})
      data, _status_code, _headers = put_quality_keywordset_with_http_info(keyword_set_id, body, opts)
      return data
    end

    # Update a keywordSet to the specified keywordSet via PUT.
    # 
    # @param keyword_set_id KeywordSet ID
    # @param body keywordSet
    # @param [Hash] opts the optional parameters
    # @return [Array<(KeywordSet, Fixnum, Hash)>] KeywordSet data, response status code and response headers
    def put_quality_keywordset_with_http_info(keyword_set_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_keywordset ..."
      end
      
      
      # verify the required parameter 'keyword_set_id' is set
      fail ArgumentError, "Missing the required parameter 'keyword_set_id' when calling QualityApi.put_quality_keywordset" if keyword_set_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_keywordset" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/keywordsets/{keywordSetId}".sub('{format}','json').sub('{' + 'keywordSetId' + '}', keyword_set_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'KeywordSet')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_keywordset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a survey as an end-customer, for the purposes of scoring it.
    # 
    # @param body survey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_survey_url customerSurveyUrl
    # @return [ScorableSurvey]
    def put_quality_surveys_scorable(body, opts = {})
      data, _status_code, _headers = put_quality_surveys_scorable_with_http_info(body, opts)
      return data
    end

    # Update a survey as an end-customer, for the purposes of scoring it.
    # 
    # @param body survey
    # @param [Hash] opts the optional parameters
    # @option opts [String] :customer_survey_url customerSurveyUrl
    # @return [Array<(ScorableSurvey, Fixnum, Hash)>] ScorableSurvey data, response status code and response headers
    def put_quality_surveys_scorable_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: QualityApi.put_quality_surveys_scorable ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling QualityApi.put_quality_surveys_scorable" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/quality/surveys/scorable".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'customerSurveyUrl'] = opts[:'customer_survey_url'] if opts[:'customer_survey_url']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ScorableSurvey')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QualityApi#put_quality_surveys_scorable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
