=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class RoutingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Delete a domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_email_domain(domain_id, opts = {})
      delete_routing_email_domain_with_http_info(domain_id, opts)
      return nil
    end

    # Delete a domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_email_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_email_domain ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.delete_routing_email_domain" if domain_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_email_domain_route(domain_name, route_id, opts = {})
      delete_routing_email_domain_route_with_http_info(domain_name, route_id, opts)
      return nil
    end

    # Delete a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_email_domain_route_with_http_info(domain_name, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.delete_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.delete_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete forceDelete
    # @return [nil]
    def delete_routing_queue(queue_id, opts = {})
      delete_routing_queue_with_http_info(queue_id, opts)
      return nil
    end

    # Delete a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :force_delete forceDelete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'forceDelete'] = opts[:'force_delete'] if opts[:'force_delete']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete queue member
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_queue_user(queue_id, member_id, opts = {})
      delete_routing_queue_user_with_http_info(queue_id, member_id, opts)
      return nil
    end

    # Delete queue member
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_user_with_http_info(queue_id, member_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue_user ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue_user" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling RoutingApi.delete_routing_queue_user" if member_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users/{memberId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a wrap-up code from a queue
    # 
    # @param queue_id Queue ID
    # @param code_id Code ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_queue_wrapupcode(queue_id, code_id, opts = {})
      delete_routing_queue_wrapupcode_with_http_info(queue_id, code_id, opts)
      return nil
    end

    # Delete a wrap-up code from a queue
    # 
    # @param queue_id Queue ID
    # @param code_id Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_queue_wrapupcode_with_http_info(queue_id, code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_queue_wrapupcode ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.delete_routing_queue_wrapupcode" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.delete_routing_queue_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_queue_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an organization's routing settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_settings(opts = {})
      delete_routing_settings_with_http_info(opts)
      return nil
    end

    # Delete an organization&#39;s routing settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_settings ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/settings".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_skill(skill_id, opts = {})
      delete_routing_skill_with_http_info(skill_id, opts)
      return nil
    end

    # Delete Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_skill_with_http_info(skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_skill ..."
      end
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.delete_routing_skill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills/{skillId}".sub('{format}','json').sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_skill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an Address by Id for SMS
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_sms_address(address_id, opts = {})
      delete_routing_sms_address_with_http_info(address_id, opts)
      return nil
    end

    # Delete an Address by Id for SMS
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_sms_address_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_sms_address ..."
      end
      
      
      # verify the required parameter 'address_id' is set
      fail ArgumentError, "Missing the required parameter 'address_id' when calling RoutingApi.delete_routing_sms_address" if address_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/addresses/{addressId}".sub('{format}','json').sub('{' + 'addressId' + '}', address_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_sms_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_sms_phonenumber(address_id, opts = {})
      delete_routing_sms_phonenumber_with_http_info(address_id, opts)
      return nil
    end

    # Delete a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_sms_phonenumber_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_sms_phonenumber ..."
      end
      
      
      # verify the required parameter 'address_id' is set
      fail ArgumentError, "Missing the required parameter 'address_id' when calling RoutingApi.delete_routing_sms_phonenumber" if address_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/phonenumbers/{addressId}".sub('{format}','json').sub('{' + 'addressId' + '}', address_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_sms_phonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the user's max utilization settings and revert to the organization-wide default.
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_user_utilization(user_id, opts = {})
      delete_routing_user_utilization_with_http_info(user_id, opts)
      return nil
    end

    # Delete the user&#39;s max utilization settings and revert to the organization-wide default.
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_user_utilization_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_user_utilization ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.delete_routing_user_utilization" if user_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/users/{userId}/utilization".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_user_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the organization-wide max utilization settings and revert to the system default.
    # 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_utilization(opts = {})
      delete_routing_utilization_with_http_info(opts)
      return nil
    end

    # Delete the organization-wide max utilization settings and revert to the system default.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_utilization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_utilization ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_routing_wrapupcode(code_id, opts = {})
      delete_routing_wrapupcode_with_http_info(code_id, opts)
      return nil
    end

    # Delete wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_routing_wrapupcode_with_http_info(code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.delete_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove routing language from user
    # 
    # @param user_id User ID
    # @param language_id languageId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_routinglanguage(user_id, language_id, opts = {})
      delete_user_routinglanguage_with_http_info(user_id, language_id, opts)
      return nil
    end

    # Remove routing language from user
    # 
    # @param user_id User ID
    # @param language_id languageId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_routinglanguage_with_http_info(user_id, language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_user_routinglanguage ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.delete_user_routinglanguage" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'language_id' is set
      fail ArgumentError, "Missing the required parameter 'language_id' when calling RoutingApi.delete_user_routinglanguage" if language_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routinglanguages/{languageId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'languageId' + '}', language_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_user_routinglanguage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove routing skill from user
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user_routingskill(user_id, skill_id, opts = {})
      delete_user_routingskill_with_http_info(user_id, skill_id, opts)
      return nil
    end

    # Remove routing skill from user
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_user_routingskill_with_http_info(user_id, skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.delete_user_routingskill ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.delete_user_routingskill" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.delete_user_routingskill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/{skillId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#delete_user_routingskill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [InboundDomain]
    def get_routing_email_domain(domain_id, opts = {})
      data, _status_code, _headers = get_routing_email_domain_with_http_info(domain_id, opts)
      return data
    end

    # Get domain
    # 
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomain, Fixnum, Hash)>] InboundDomain data, response status code and response headers
    def get_routing_email_domain_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.get_routing_email_domain" if domain_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def get_routing_email_domain_route(domain_name, route_id, opts = {})
      data, _status_code, _headers = get_routing_email_domain_route_with_http_info(domain_name, route_id, opts)
      return data
    end

    # Get a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def get_routing_email_domain_route_with_http_info(domain_name, route_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.get_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.get_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get routes
    # 
    # @param domain_name email domain
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :pattern Filter routes by the route&#39;s pattern property
    # @return [InboundRouteEntityListing]
    def get_routing_email_domain_routes(domain_name, opts = {})
      data, _status_code, _headers = get_routing_email_domain_routes_with_http_info(domain_name, opts)
      return data
    end

    # Get routes
    # 
    # @param domain_name email domain
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :pattern Filter routes by the route&#39;s pattern property
    # @return [Array<(InboundRouteEntityListing, Fixnum, Hash)>] InboundRouteEntityListing data, response status code and response headers
    def get_routing_email_domain_routes_with_http_info(domain_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domain_routes ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.get_routing_email_domain_routes" if domain_name.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'pattern'] = opts[:'pattern'] if opts[:'pattern']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRouteEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domain_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [InboundDomainEntityListing]
    def get_routing_email_domains(opts = {})
      data, _status_code, _headers = get_routing_email_domains_with_http_info(opts)
      return data
    end

    # Get domains
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomainEntityListing, Fixnum, Hash)>] InboundDomainEntityListing data, response status code and response headers
    def get_routing_email_domains_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_domains ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomainEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get email setup
    # 
    # @param [Hash] opts the optional parameters
    # @return [EmailSetup]
    def get_routing_email_setup(opts = {})
      data, _status_code, _headers = get_routing_email_setup_with_http_info(opts)
      return data
    end

    # Get email setup
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSetup, Fixnum, Hash)>] EmailSetup data, response status code and response headers
    def get_routing_email_setup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_email_setup ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/email/setup".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSetup')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_email_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of supported languages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_order Ascending or descending sort order (default to ASC)
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id id
    # @return [LanguageEntityListing]
    def get_routing_languages(opts = {})
      data, _status_code, _headers = get_routing_languages_with_http_info(opts)
      return data
    end

    # Get the list of supported languages.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_order Ascending or descending sort order
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id id
    # @return [Array<(LanguageEntityListing, Fixnum, Hash)>] LanguageEntityListing data, response status code and response headers
    def get_routing_languages_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_languages ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/languages".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if opts[:'id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LanguageEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a recipient
    # 
    # @param recipient_id Recipient ID
    # @param [Hash] opts the optional parameters
    # @return [Recipient]
    def get_routing_message_recipient(recipient_id, opts = {})
      data, _status_code, _headers = get_routing_message_recipient_with_http_info(recipient_id, opts)
      return data
    end

    # Get a recipient
    # 
    # @param recipient_id Recipient ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Recipient, Fixnum, Hash)>] Recipient data, response status code and response headers
    def get_routing_message_recipient_with_http_info(recipient_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_message_recipient ..."
      end
      
      
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RoutingApi.get_routing_message_recipient" if recipient_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/message/recipients/{recipientId}".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_message_recipient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get recipients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :messenger_type Messenger Type
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [RecipientListing]
    def get_routing_message_recipients(opts = {})
      data, _status_code, _headers = get_routing_message_recipients_with_http_info(opts)
      return data
    end

    # Get recipients
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :messenger_type Messenger Type
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(RecipientListing, Fixnum, Hash)>] RecipientListing data, response status code and response headers
    def get_routing_message_recipients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_message_recipients ..."
      end
      
      
      
      
      if opts[:'messenger_type'] && !['sms', 'facebook', 'twitter', 'line', 'whatsapp', 'webmessaging'].include?(opts[:'messenger_type'])
        fail ArgumentError, 'invalid value for "messenger_type", must be one of sms, facebook, twitter, line, whatsapp, webmessaging'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/message/recipients".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'messengerType'] = opts[:'messenger_type'] if opts[:'messenger_type']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecipientListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_message_recipients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about this queue.
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def get_routing_queue(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_with_http_info(queue_id, opts)
      return data
    end

    # Get details about this queue.
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def get_routing_queue_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue" if queue_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conversation_id conversationId
    # @return [EstimatedWaitTimePredictions]
    def get_routing_queue_estimatedwaittime(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_estimatedwaittime_with_http_info(queue_id, opts)
      return data
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :conversation_id conversationId
    # @return [Array<(EstimatedWaitTimePredictions, Fixnum, Hash)>] EstimatedWaitTimePredictions data, response status code and response headers
    def get_routing_queue_estimatedwaittime_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_estimatedwaittime ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_estimatedwaittime" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/estimatedwaittime".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'conversationId'] = opts[:'conversation_id'] if opts[:'conversation_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstimatedWaitTimePredictions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_estimatedwaittime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param media_type mediaType
    # @param [Hash] opts the optional parameters
    # @return [EstimatedWaitTimePredictions]
    def get_routing_queue_mediatype_estimatedwaittime(queue_id, media_type, opts = {})
      data, _status_code, _headers = get_routing_queue_mediatype_estimatedwaittime_with_http_info(queue_id, media_type, opts)
      return data
    end

    # Get Estimated Wait Time
    # 
    # @param queue_id queueId
    # @param media_type mediaType
    # @param [Hash] opts the optional parameters
    # @return [Array<(EstimatedWaitTimePredictions, Fixnum, Hash)>] EstimatedWaitTimePredictions data, response status code and response headers
    def get_routing_queue_mediatype_estimatedwaittime_with_http_info(queue_id, media_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_mediatype_estimatedwaittime ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_mediatype_estimatedwaittime" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'media_type' is set
      fail ArgumentError, "Missing the required parameter 'media_type' when calling RoutingApi.get_routing_queue_mediatype_estimatedwaittime" if media_type.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/mediatypes/{mediaType}/estimatedwaittime".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'mediaType' + '}', media_type.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EstimatedWaitTimePredictions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_mediatype_estimatedwaittime\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the members of this queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @option opts [BOOLEAN] :joined Filter by joined status
    # @option opts [String] :name Filter by queue member name
    # @option opts [Array<String>] :profile_skills Filter by profile skill
    # @option opts [Array<String>] :skills Filter by skill
    # @option opts [Array<String>] :languages Filter by language
    # @option opts [Array<String>] :routing_status Filter by routing status
    # @option opts [Array<String>] :presence Filter by presence
    # @return [QueueMemberEntityListing]
    def get_routing_queue_users(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_users_with_http_info(queue_id, opts)
      return data
    end

    # Get the members of this queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [Array<String>] :expand Which fields, if any, to expand.
    # @option opts [BOOLEAN] :joined Filter by joined status
    # @option opts [String] :name Filter by queue member name
    # @option opts [Array<String>] :profile_skills Filter by profile skill
    # @option opts [Array<String>] :skills Filter by skill
    # @option opts [Array<String>] :languages Filter by language
    # @option opts [Array<String>] :routing_status Filter by routing status
    # @option opts [Array<String>] :presence Filter by presence
    # @return [Array<(QueueMemberEntityListing, Fixnum, Hash)>] QueueMemberEntityListing data, response status code and response headers
    def get_routing_queue_users_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'expand'] = @api_client.build_collection_param(opts[:'expand'], :multi) if opts[:'expand']
      query_params[:'joined'] = opts[:'joined'] if opts[:'joined']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'profileSkills'] = @api_client.build_collection_param(opts[:'profile_skills'], :multi) if opts[:'profile_skills']
      query_params[:'skills'] = @api_client.build_collection_param(opts[:'skills'], :multi) if opts[:'skills']
      query_params[:'languages'] = @api_client.build_collection_param(opts[:'languages'], :multi) if opts[:'languages']
      query_params[:'routingStatus'] = @api_client.build_collection_param(opts[:'routing_status'], :multi) if opts[:'routing_status']
      query_params[:'presence'] = @api_client.build_collection_param(opts[:'presence'], :multi) if opts[:'presence']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMemberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the wrap-up codes for a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [WrapupCodeEntityListing]
    def get_routing_queue_wrapupcodes(queue_id, opts = {})
      data, _status_code, _headers = get_routing_queue_wrapupcodes_with_http_info(queue_id, opts)
      return data
    end

    # Get the wrap-up codes for a queue
    # 
    # @param queue_id Queue ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(WrapupCodeEntityListing, Fixnum, Hash)>] WrapupCodeEntityListing data, response status code and response headers
    def get_routing_queue_wrapupcodes_with_http_info(queue_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queue_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.get_routing_queue_wrapupcodes" if queue_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCodeEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queue_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of queues.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id ID(s)
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [QueueEntityListing]
    def get_routing_queues(opts = {})
      data, _status_code, _headers = get_routing_queues_with_http_info(opts)
      return data
    end

    # Get list of queues.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id ID(s)
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [Array<(QueueEntityListing, Fixnum, Hash)>] QueueEntityListing data, response status code and response headers
    def get_routing_queues_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queues ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if opts[:'id']
      query_params[:'divisionId'] = @api_client.build_collection_param(opts[:'division_id'], :multi) if opts[:'division_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size [max value is 100] (default to 25)
    # @option opts [Integer] :page_number Page number [max value is 5] (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :sort_order Sort order (default to asc)
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id Queue ID(s)
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [QueueEntityListing]
    def get_routing_queues_divisionviews(opts = {})
      data, _status_code, _headers = get_routing_queues_divisionviews_with_http_info(opts)
      return data
    end

    # Get a paged listing of simplified queue objects, filterable by name, queue ID(s), or division ID(s).
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size [max value is 100]
    # @option opts [Integer] :page_number Page number [max value is 5]
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :sort_order Sort order
    # @option opts [String] :name Name
    # @option opts [Array<String>] :id Queue ID(s)
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [Array<(QueueEntityListing, Fixnum, Hash)>] QueueEntityListing data, response status code and response headers
    def get_routing_queues_divisionviews_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queues_divisionviews ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_by'] && !['name', 'id', 'divisionId'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of name, id, divisionId'
      end
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['asc', 'desc', 'score'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc, score'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/divisionviews".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if opts[:'id']
      query_params[:'divisionId'] = @api_client.build_collection_param(opts[:'division_id'], :multi) if opts[:'division_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queues_divisionviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paged listing of simplified queue objects.  Can be used to get a digest of all queues in an organization.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size [max value is 500] (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :sort_order Sort order (default to asc)
    # @return [QueueEntityListing]
    def get_routing_queues_divisionviews_all(opts = {})
      data, _status_code, _headers = get_routing_queues_divisionviews_all_with_http_info(opts)
      return data
    end

    # Get a paged listing of simplified queue objects.  Can be used to get a digest of all queues in an organization.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size [max value is 500]
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :sort_order Sort order
    # @return [Array<(QueueEntityListing, Fixnum, Hash)>] QueueEntityListing data, response status code and response headers
    def get_routing_queues_divisionviews_all_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queues_divisionviews_all ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_by'] && !['name', 'id', 'divisionId'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of name, id, divisionId'
      end
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['asc', 'desc', 'score'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc, score'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/divisionviews/all".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queues_divisionviews_all\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a paged listing of queues the user is a member of.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :joined Joined
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :sort_order Sort order (default to asc)
    # @return [UserQueueEntityListing]
    def get_routing_queues_me(opts = {})
      data, _status_code, _headers = get_routing_queues_me_with_http_info(opts)
      return data
    end

    # Get a paged listing of queues the user is a member of.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :joined Joined
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :sort_order Sort order
    # @return [Array<(UserQueueEntityListing, Fixnum, Hash)>] UserQueueEntityListing data, response status code and response headers
    def get_routing_queues_me_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_queues_me ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/me".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'joined'] = opts[:'joined'] if opts[:'joined']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserQueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_queues_me\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an organization's routing settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [RoutingSettings]
    def get_routing_settings(opts = {})
      data, _status_code, _headers = get_routing_settings_with_http_info(opts)
      return data
    end

    # Get an organization&#39;s routing settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSettings, Fixnum, Hash)>] RoutingSettings data, response status code and response headers
    def get_routing_settings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_settings ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/settings".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Contact Center Settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [ContactCenterSettings]
    def get_routing_settings_contactcenter(opts = {})
      data, _status_code, _headers = get_routing_settings_contactcenter_with_http_info(opts)
      return data
    end

    # Get Contact Center Settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ContactCenterSettings, Fixnum, Hash)>] ContactCenterSettings data, response status code and response headers
    def get_routing_settings_contactcenter_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_settings_contactcenter ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/settings/contactcenter".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ContactCenterSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_settings_contactcenter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Transcription Settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [TranscriptionSettings]
    def get_routing_settings_transcription(opts = {})
      data, _status_code, _headers = get_routing_settings_transcription_with_http_info(opts)
      return data
    end

    # Get Transcription Settings
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TranscriptionSettings, Fixnum, Hash)>] TranscriptionSettings data, response status code and response headers
    def get_routing_settings_transcription_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_settings_transcription ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/settings/transcription".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TranscriptionSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_settings_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [RoutingSkill]
    def get_routing_skill(skill_id, opts = {})
      data, _status_code, _headers = get_routing_skill_with_http_info(skill_id, opts)
      return data
    end

    # Get Routing Skill
    # 
    # @param skill_id Skill ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSkill, Fixnum, Hash)>] RoutingSkill data, response status code and response headers
    def get_routing_skill_with_http_info(skill_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_skill ..."
      end
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.get_routing_skill" if skill_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills/{skillId}".sub('{format}','json').sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_skill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the list of routing skills.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :name Filter for results that start with this value
    # @option opts [Array<String>] :id id
    # @return [SkillEntityListing]
    def get_routing_skills(opts = {})
      data, _status_code, _headers = get_routing_skills_with_http_info(opts)
      return data
    end

    # Get the list of routing skills.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :name Filter for results that start with this value
    # @option opts [Array<String>] :id id
    # @return [Array<(SkillEntityListing, Fixnum, Hash)>] SkillEntityListing data, response status code and response headers
    def get_routing_skills_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_skills ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'name'] = opts[:'name'] if opts[:'name']
      query_params[:'id'] = @api_client.build_collection_param(opts[:'id'], :multi) if opts[:'id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_skills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Address by Id for SMS
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [SmsAddress]
    def get_routing_sms_address(address_id, opts = {})
      data, _status_code, _headers = get_routing_sms_address_with_http_info(address_id, opts)
      return data
    end

    # Get an Address by Id for SMS
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsAddress, Fixnum, Hash)>] SmsAddress data, response status code and response headers
    def get_routing_sms_address_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_sms_address ..."
      end
      
      
      # verify the required parameter 'address_id' is set
      fail ArgumentError, "Missing the required parameter 'address_id' when calling RoutingApi.get_routing_sms_address" if address_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/addresses/{addressId}".sub('{format}','json').sub('{' + 'addressId' + '}', address_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_sms_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of Addresses for SMS
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [SmsAddressEntityListing]
    def get_routing_sms_addresses(opts = {})
      data, _status_code, _headers = get_routing_sms_addresses_with_http_info(opts)
      return data
    end

    # Get a list of Addresses for SMS
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(SmsAddressEntityListing, Fixnum, Hash)>] SmsAddressEntityListing data, response status code and response headers
    def get_routing_sms_addresses_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_sms_addresses ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/addresses".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsAddressEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_sms_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of available phone numbers for SMS provisioning.
    # This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
    # @param country_code The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned
    # @param phone_number_type Type of available phone numbers searched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Region/province/state that can be used to restrict the numbers returned
    # @option opts [String] :city City that can be used to restrict the numbers returned
    # @option opts [String] :area_code Area code that can be used to restrict the numbers returned
    # @option opts [String] :pattern A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit.
    # @option opts [String] :address_requirement This indicates whether the phone number requires to have an Address registered.
    # @return [SMSAvailablePhoneNumberEntityListing]
    def get_routing_sms_availablephonenumbers(country_code, phone_number_type, opts = {})
      data, _status_code, _headers = get_routing_sms_availablephonenumbers_with_http_info(country_code, phone_number_type, opts)
      return data
    end

    # Get a list of available phone numbers for SMS provisioning.
    # This request will return up to 30 random phone numbers matching the criteria specified.  To get additional phone numbers repeat the request.
    # @param country_code The ISO 3166-1 alpha-2 country code of the county for which available phone numbers should be returned
    # @param phone_number_type Type of available phone numbers searched
    # @param [Hash] opts the optional parameters
    # @option opts [String] :region Region/province/state that can be used to restrict the numbers returned
    # @option opts [String] :city City that can be used to restrict the numbers returned
    # @option opts [String] :area_code Area code that can be used to restrict the numbers returned
    # @option opts [String] :pattern A pattern to match phone numbers. Valid characters are &#39;*&#39; and [0-9a-zA-Z]. The &#39;*&#39; character will match any single digit.
    # @option opts [String] :address_requirement This indicates whether the phone number requires to have an Address registered.
    # @return [Array<(SMSAvailablePhoneNumberEntityListing, Fixnum, Hash)>] SMSAvailablePhoneNumberEntityListing data, response status code and response headers
    def get_routing_sms_availablephonenumbers_with_http_info(country_code, phone_number_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_sms_availablephonenumbers ..."
      end
      
      
      # verify the required parameter 'country_code' is set
      fail ArgumentError, "Missing the required parameter 'country_code' when calling RoutingApi.get_routing_sms_availablephonenumbers" if country_code.nil?
      
      
      
      
      
      
      # verify the required parameter 'phone_number_type' is set
      fail ArgumentError, "Missing the required parameter 'phone_number_type' when calling RoutingApi.get_routing_sms_availablephonenumbers" if phone_number_type.nil?
      
      # verify enum value
      unless ['local', 'mobile', 'tollfree'].include?(phone_number_type)
        fail ArgumentError, "invalid value for 'phone_number_type', must be one of local, mobile, tollfree"
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'address_requirement'] && !['none', 'any', 'local', 'foreign'].include?(opts[:'address_requirement'])
        fail ArgumentError, 'invalid value for "address_requirement", must be one of none, any, local, foreign'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/availablephonenumbers".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'countryCode'] = country_code
      query_params[:'phoneNumberType'] = phone_number_type
      query_params[:'region'] = opts[:'region'] if opts[:'region']
      query_params[:'city'] = opts[:'city'] if opts[:'city']
      query_params[:'areaCode'] = opts[:'area_code'] if opts[:'area_code']
      query_params[:'pattern'] = opts[:'pattern'] if opts[:'pattern']
      query_params[:'addressRequirement'] = opts[:'address_requirement'] if opts[:'address_requirement']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SMSAvailablePhoneNumberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_sms_availablephonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [SmsPhoneNumber]
    def get_routing_sms_phonenumber(address_id, opts = {})
      data, _status_code, _headers = get_routing_sms_phonenumber_with_http_info(address_id, opts)
      return data
    end

    # Get a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsPhoneNumber, Fixnum, Hash)>] SmsPhoneNumber data, response status code and response headers
    def get_routing_sms_phonenumber_with_http_info(address_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_sms_phonenumber ..."
      end
      
      
      # verify the required parameter 'address_id' is set
      fail ArgumentError, "Missing the required parameter 'address_id' when calling RoutingApi.get_routing_sms_phonenumber" if address_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/phonenumbers/{addressId}".sub('{format}','json').sub('{' + 'addressId' + '}', address_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsPhoneNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_sms_phonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a list of provisioned phone numbers.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used.
    # @option opts [String] :phone_number_type Filter on phone number type
    # @option opts [String] :phone_number_status Filter on phone number status
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @return [SmsPhoneNumberEntityListing]
    def get_routing_sms_phonenumbers(opts = {})
      data, _status_code, _headers = get_routing_sms_phonenumbers_with_http_info(opts)
      return data
    end

    # Get a list of provisioned phone numbers.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :phone_number Filter on phone number address. Allowable characters are the digits &#39;0-9&#39; and the wild card character &#39;\\*&#39;. If just digits are present, a contains search is done on the address pattern. For example, &#39;317&#39; could be matched anywhere in the address. An &#39;\\*&#39; will match multiple digits. For example, to match a specific area code within the US a pattern like &#39;1317*&#39; could be used.
    # @option opts [String] :phone_number_type Filter on phone number type
    # @option opts [String] :phone_number_status Filter on phone number status
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @return [Array<(SmsPhoneNumberEntityListing, Fixnum, Hash)>] SmsPhoneNumberEntityListing data, response status code and response headers
    def get_routing_sms_phonenumbers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_sms_phonenumbers ..."
      end
      
      
      
      
      
      
      
      
      
      
      if opts[:'phone_number_type'] && !['local', 'mobile', 'tollfree', 'shortcode'].include?(opts[:'phone_number_type'])
        fail ArgumentError, 'invalid value for "phone_number_type", must be one of local, mobile, tollfree, shortcode'
      end
      
      
      
      
      
      
      
      if opts[:'phone_number_status'] && !['active', 'invalid', 'porting'].include?(opts[:'phone_number_status'])
        fail ArgumentError, 'invalid value for "phone_number_status", must be one of active, invalid, porting'
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/phonenumbers".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'phoneNumber'] = opts[:'phone_number'] if opts[:'phone_number']
      query_params[:'phoneNumberType'] = opts[:'phone_number_type'] if opts[:'phone_number_type']
      query_params[:'phoneNumberStatus'] = opts[:'phone_number_status'] if opts[:'phone_number_status']
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsPhoneNumberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_sms_phonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the user's max utilization settings.  If not configured, the organization-wide default is returned.
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def get_routing_user_utilization(user_id, opts = {})
      data, _status_code, _headers = get_routing_user_utilization_with_http_info(user_id, opts)
      return data
    end

    # Get the user&#39;s max utilization settings.  If not configured, the organization-wide default is returned.
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def get_routing_user_utilization_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_user_utilization ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.get_routing_user_utilization" if user_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/users/{userId}/utilization".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_user_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the organization-wide max utilization settings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def get_routing_utilization(opts = {})
      data, _status_code, _headers = get_routing_utilization_with_http_info(opts)
      return data
    end

    # Get the organization-wide max utilization settings.
    # 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def get_routing_utilization_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_utilization ..."
      end
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get details about this wrap-up code.
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def get_routing_wrapupcode(code_id, opts = {})
      data, _status_code, _headers = get_routing_wrapupcode_with_http_info(code_id, opts)
      return data
    end

    # Get details about this wrap-up code.
    # 
    # @param code_id Wrapup Code ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def get_routing_wrapupcode_with_http_info(code_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.get_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of wrapup codes.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_by Sort by (default to name)
    # @option opts [String] :name Name
    # @return [WrapupCodeEntityListing]
    def get_routing_wrapupcodes(opts = {})
      data, _status_code, _headers = get_routing_wrapupcodes_with_http_info(opts)
      return data
    end

    # Get list of wrapup codes.
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_by Sort by
    # @option opts [String] :name Name
    # @return [Array<(WrapupCodeEntityListing, Fixnum, Hash)>] WrapupCodeEntityListing data, response status code and response headers
    def get_routing_wrapupcodes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_routing_wrapupcodes ..."
      end
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_by'] && !['name', 'id'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of name, id'
      end
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortBy'] = opts[:'sort_by'] if opts[:'sort_by']
      query_params[:'name'] = opts[:'name'] if opts[:'name']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCodeEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_routing_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get queues for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [BOOLEAN] :joined Is joined to the queue (default to true)
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [UserQueueEntityListing]
    def get_user_queues(user_id, opts = {})
      data, _status_code, _headers = get_user_queues_with_http_info(user_id, opts)
      return data
    end

    # Get queues for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [BOOLEAN] :joined Is joined to the queue
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [Array<(UserQueueEntityListing, Fixnum, Hash)>] UserQueueEntityListing data, response status code and response headers
    def get_user_queues_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_user_queues ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.get_user_queues" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/queues".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'joined'] = opts[:'joined'] if opts[:'joined']
      query_params[:'divisionId'] = @api_client.build_collection_param(opts[:'division_id'], :multi) if opts[:'division_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserQueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_user_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List routing language for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_order Ascending or descending sort order (default to ASC)
    # @return [UserLanguageEntityListing]
    def get_user_routinglanguages(user_id, opts = {})
      data, _status_code, _headers = get_user_routinglanguages_with_http_info(user_id, opts)
      return data
    end

    # List routing language for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_order Ascending or descending sort order
    # @return [Array<(UserLanguageEntityListing, Fixnum, Hash)>] UserLanguageEntityListing data, response status code and response headers
    def get_user_routinglanguages_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_user_routinglanguages ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.get_user_routinglanguages" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routinglanguages".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserLanguageEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_user_routinglanguages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List routing skills for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size (default to 25)
    # @option opts [Integer] :page_number Page number (default to 1)
    # @option opts [String] :sort_order Ascending or descending sort order (default to ASC)
    # @return [UserSkillEntityListing]
    def get_user_routingskills(user_id, opts = {})
      data, _status_code, _headers = get_user_routingskills_with_http_info(user_id, opts)
      return data
    end

    # List routing skills for user
    # 
    # @param user_id User ID
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page_size Page size
    # @option opts [Integer] :page_number Page number
    # @option opts [String] :sort_order Ascending or descending sort order
    # @return [Array<(UserSkillEntityListing, Fixnum, Hash)>] UserSkillEntityListing data, response status code and response headers
    def get_user_routingskills_with_http_info(user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.get_user_routingskills ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.get_user_routingskills" if user_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      if opts[:'sort_order'] && !['ascending', 'descending'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of ascending, descending'
      end
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'pageSize'] = opts[:'page_size'] if opts[:'page_size']
      query_params[:'pageNumber'] = opts[:'page_number'] if opts[:'page_number']
      query_params[:'sortOrder'] = opts[:'sort_order'] if opts[:'sort_order']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserSkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#get_user_routingskills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update domain settings
    # 
    # @param domain_id domain ID
    # @param body Domain settings
    # @param [Hash] opts the optional parameters
    # @return [InboundDomain]
    def patch_routing_email_domain(domain_id, body, opts = {})
      data, _status_code, _headers = patch_routing_email_domain_with_http_info(domain_id, body, opts)
      return data
    end

    # Update domain settings
    # 
    # @param domain_id domain ID
    # @param body Domain settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomain, Fixnum, Hash)>] InboundDomain data, response status code and response headers
    def patch_routing_email_domain_with_http_info(domain_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_email_domain ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.patch_routing_email_domain" if domain_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_email_domain" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_email_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the ring number OR joined status for a User in a Queue
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [QueueMember]
    def patch_routing_queue_user(queue_id, member_id, body, opts = {})
      data, _status_code, _headers = patch_routing_queue_user_with_http_info(queue_id, member_id, body, opts)
      return data
    end

    # Update the ring number OR joined status for a User in a Queue
    # 
    # @param queue_id Queue ID
    # @param member_id Member ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMember, Fixnum, Hash)>] QueueMember data, response status code and response headers
    def patch_routing_queue_user_with_http_info(queue_id, member_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_queue_user ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.patch_routing_queue_user" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'member_id' is set
      fail ArgumentError, "Missing the required parameter 'member_id' when calling RoutingApi.patch_routing_queue_user" if member_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_queue_user" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users/{memberId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'memberId' + '}', member_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMember')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_queue_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join or unjoin a set of users for a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @return [QueueMemberEntityListing]
    def patch_routing_queue_users(queue_id, body, opts = {})
      data, _status_code, _headers = patch_routing_queue_users_with_http_info(queue_id, body, opts)
      return data
    end

    # Join or unjoin a set of users for a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueMemberEntityListing, Fixnum, Hash)>] QueueMemberEntityListing data, response status code and response headers
    def patch_routing_queue_users_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.patch_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_queue_users" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueMemberEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Contact Center Settings
    # 
    # @param body Contact Center Settings
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def patch_routing_settings_contactcenter(body, opts = {})
      patch_routing_settings_contactcenter_with_http_info(body, opts)
      return nil
    end

    # Update Contact Center Settings
    # 
    # @param body Contact Center Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def patch_routing_settings_contactcenter_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_routing_settings_contactcenter ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_routing_settings_contactcenter" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/settings/contactcenter".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_routing_settings_contactcenter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join or unjoin a queue for a user
    # 
    # @param queue_id Queue ID
    # @param user_id User ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [UserQueue]
    def patch_user_queue(queue_id, user_id, body, opts = {})
      data, _status_code, _headers = patch_user_queue_with_http_info(queue_id, user_id, body, opts)
      return data
    end

    # Join or unjoin a queue for a user
    # 
    # @param queue_id Queue ID
    # @param user_id User ID
    # @param body Queue Member
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserQueue, Fixnum, Hash)>] UserQueue data, response status code and response headers
    def patch_user_queue_with_http_info(queue_id, user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_user_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.patch_user_queue" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.patch_user_queue" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_user_queue" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s).sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserQueue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_user_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Join or unjoin a set of queues for a user
    # 
    # @param user_id User ID
    # @param body User Queues
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [UserQueueEntityListing]
    def patch_user_queues(user_id, body, opts = {})
      data, _status_code, _headers = patch_user_queues_with_http_info(user_id, body, opts)
      return data
    end

    # Join or unjoin a set of queues for a user
    # 
    # @param user_id User ID
    # @param body User Queues
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :division_id Division ID(s)
    # @return [Array<(UserQueueEntityListing, Fixnum, Hash)>] UserQueueEntityListing data, response status code and response headers
    def patch_user_queues_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_user_queues ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.patch_user_queues" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_user_queues" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/queues".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'divisionId'] = @api_client.build_collection_param(opts[:'division_id'], :multi) if opts[:'division_id']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserQueueEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_user_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update routing language proficiency or state.
    # 
    # @param user_id User ID
    # @param language_id languageId
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingLanguage]
    def patch_user_routinglanguage(user_id, language_id, body, opts = {})
      data, _status_code, _headers = patch_user_routinglanguage_with_http_info(user_id, language_id, body, opts)
      return data
    end

    # Update routing language proficiency or state.
    # 
    # @param user_id User ID
    # @param language_id languageId
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingLanguage, Fixnum, Hash)>] UserRoutingLanguage data, response status code and response headers
    def patch_user_routinglanguage_with_http_info(user_id, language_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_user_routinglanguage ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.patch_user_routinglanguage" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'language_id' is set
      fail ArgumentError, "Missing the required parameter 'language_id' when calling RoutingApi.patch_user_routinglanguage" if language_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_user_routinglanguage" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routinglanguages/{languageId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'languageId' + '}', language_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingLanguage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_user_routinglanguage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add bulk routing language to user. Max limit 50 languages
    # 
    # @param user_id User ID
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [UserLanguageEntityListing]
    def patch_user_routinglanguages_bulk(user_id, body, opts = {})
      data, _status_code, _headers = patch_user_routinglanguages_bulk_with_http_info(user_id, body, opts)
      return data
    end

    # Add bulk routing language to user. Max limit 50 languages
    # 
    # @param user_id User ID
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserLanguageEntityListing, Fixnum, Hash)>] UserLanguageEntityListing data, response status code and response headers
    def patch_user_routinglanguages_bulk_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_user_routinglanguages_bulk ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.patch_user_routinglanguages_bulk" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_user_routinglanguages_bulk" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routinglanguages/bulk".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserLanguageEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_user_routinglanguages_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk add routing skills to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserSkillEntityListing]
    def patch_user_routingskills_bulk(user_id, body, opts = {})
      data, _status_code, _headers = patch_user_routingskills_bulk_with_http_info(user_id, body, opts)
      return data
    end

    # Bulk add routing skills to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSkillEntityListing, Fixnum, Hash)>] UserSkillEntityListing data, response status code and response headers
    def patch_user_routingskills_bulk_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.patch_user_routingskills_bulk ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.patch_user_routingskills_bulk" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.patch_user_routingskills_bulk" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/bulk".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserSkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#patch_user_routingskills_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [QueueObservationQueryResponse]
    def post_analytics_queues_observations_query(body, opts = {})
      data, _status_code, _headers = post_analytics_queues_observations_query_with_http_info(body, opts)
      return data
    end

    # Query for queue observations
    # 
    # @param body query
    # @param [Hash] opts the optional parameters
    # @return [Array<(QueueObservationQueryResponse, Fixnum, Hash)>] QueueObservationQueryResponse data, response status code and response headers
    def post_analytics_queues_observations_query_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_analytics_queues_observations_query ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_analytics_queues_observations_query" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/analytics/queues/observations/query".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'QueueObservationQueryResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_analytics_queues_observations_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a route
    # 
    # @param domain_name email domain
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def post_routing_email_domain_routes(domain_name, body, opts = {})
      data, _status_code, _headers = post_routing_email_domain_routes_with_http_info(domain_name, body, opts)
      return data
    end

    # Create a route
    # 
    # @param domain_name email domain
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def post_routing_email_domain_routes_with_http_info(domain_name, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_email_domain_routes ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.post_routing_email_domain_routes" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_email_domain_routes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_email_domain_routes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tests the custom SMTP server integration connection set on this domain
    # The request body is optional. If omitted, this endpoint will just test the connection of the Custom SMTP Server. If the body is specified, there will be an attempt to send an email message to the server.
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [TestMessage] :body TestMessage
    # @return [TestMessage]
    def post_routing_email_domain_testconnection(domain_id, opts = {})
      data, _status_code, _headers = post_routing_email_domain_testconnection_with_http_info(domain_id, opts)
      return data
    end

    # Tests the custom SMTP server integration connection set on this domain
    # The request body is optional. If omitted, this endpoint will just test the connection of the Custom SMTP Server. If the body is specified, there will be an attempt to send an email message to the server.
    # @param domain_id domain ID
    # @param [Hash] opts the optional parameters
    # @option opts [TestMessage] :body TestMessage
    # @return [Array<(TestMessage, Fixnum, Hash)>] TestMessage data, response status code and response headers
    def post_routing_email_domain_testconnection_with_http_info(domain_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_email_domain_testconnection ..."
      end
      
      
      # verify the required parameter 'domain_id' is set
      fail ArgumentError, "Missing the required parameter 'domain_id' when calling RoutingApi.post_routing_email_domain_testconnection" if domain_id.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainId}/testconnection".sub('{format}','json').sub('{' + 'domainId' + '}', domain_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TestMessage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_email_domain_testconnection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a domain
    # 
    # @param body Domain
    # @param [Hash] opts the optional parameters
    # @return [InboundDomain]
    def post_routing_email_domains(body, opts = {})
      data, _status_code, _headers = post_routing_email_domains_with_http_info(body, opts)
      return data
    end

    # Create a domain
    # 
    # @param body Domain
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundDomain, Fixnum, Hash)>] InboundDomain data, response status code and response headers
    def post_routing_email_domains_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_email_domains ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_email_domains" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundDomain')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_email_domains\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Language
    # 
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Language]
    def post_routing_languages(body, opts = {})
      data, _status_code, _headers = post_routing_languages_with_http_info(body, opts)
      return data
    end

    # Create Language
    # 
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Array<(Language, Fixnum, Hash)>] Language data, response status code and response headers
    def post_routing_languages_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_languages ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_languages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/languages".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Language')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_languages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Bulk add or delete up to 100 queue members
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete True to delete queue members (default to false)
    # @return [String]
    def post_routing_queue_users(queue_id, body, opts = {})
      data, _status_code, _headers = post_routing_queue_users_with_http_info(queue_id, body, opts)
      return data
    end

    # Bulk add or delete up to 100 queue members
    # 
    # @param queue_id Queue ID
    # @param body Queue Members
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :delete True to delete queue members
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def post_routing_queue_users_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queue_users ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.post_routing_queue_users" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queue_users" if body.nil?
      
      
      
      
      
      
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/users".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'delete'] = opts[:'delete'] if opts[:'delete']

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queue_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add up to 100 wrap-up codes to a queue
    # 
    # @param queue_id Queue ID
    # @param body List of wrapup codes
    # @param [Hash] opts the optional parameters
    # @return [Array<WrapupCode>]
    def post_routing_queue_wrapupcodes(queue_id, body, opts = {})
      data, _status_code, _headers = post_routing_queue_wrapupcodes_with_http_info(queue_id, body, opts)
      return data
    end

    # Add up to 100 wrap-up codes to a queue
    # 
    # @param queue_id Queue ID
    # @param body List of wrapup codes
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<WrapupCode>, Fixnum, Hash)>] Array<WrapupCode> data, response status code and response headers
    def post_routing_queue_wrapupcodes_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queue_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.post_routing_queue_wrapupcodes" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queue_wrapupcodes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}/wrapupcodes".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<WrapupCode>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queue_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a queue
    # 
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def post_routing_queues(body, opts = {})
      data, _status_code, _headers = post_routing_queues_with_http_info(body, opts)
      return data
    end

    # Create a queue
    # 
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def post_routing_queues_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_queues ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_queues" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_queues\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Skill
    # 
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [RoutingSkill]
    def post_routing_skills(body, opts = {})
      data, _status_code, _headers = post_routing_skills_with_http_info(body, opts)
      return data
    end

    # Create Skill
    # 
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSkill, Fixnum, Hash)>] RoutingSkill data, response status code and response headers
    def post_routing_skills_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_skills ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_skills" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/skills".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_skills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provision an Address for SMS
    # 
    # @param body SmsAddress
    # @param [Hash] opts the optional parameters
    # @return [SmsAddress]
    def post_routing_sms_addresses(body, opts = {})
      data, _status_code, _headers = post_routing_sms_addresses_with_http_info(body, opts)
      return data
    end

    # Provision an Address for SMS
    # 
    # @param body SmsAddress
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsAddress, Fixnum, Hash)>] SmsAddress data, response status code and response headers
    def post_routing_sms_addresses_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_sms_addresses ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_sms_addresses" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/addresses".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsAddress')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_sms_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provision a phone number for SMS
    # 
    # @param body SmsPhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [SmsPhoneNumber]
    def post_routing_sms_phonenumbers(body, opts = {})
      data, _status_code, _headers = post_routing_sms_phonenumbers_with_http_info(body, opts)
      return data
    end

    # Provision a phone number for SMS
    # 
    # @param body SmsPhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsPhoneNumber, Fixnum, Hash)>] SmsPhoneNumber data, response status code and response headers
    def post_routing_sms_phonenumbers_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_sms_phonenumbers ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_sms_phonenumbers" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/phonenumbers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsPhoneNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_sms_phonenumbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a wrap-up code
    # 
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def post_routing_wrapupcodes(body, opts = {})
      data, _status_code, _headers = post_routing_wrapupcodes_with_http_info(body, opts)
      return data
    end

    # Create a wrap-up code
    # 
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def post_routing_wrapupcodes_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_routing_wrapupcodes ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_routing_wrapupcodes" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_routing_wrapupcodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add routing language to user
    # 
    # @param user_id User ID
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingLanguage]
    def post_user_routinglanguages(user_id, body, opts = {})
      data, _status_code, _headers = post_user_routinglanguages_with_http_info(user_id, body, opts)
      return data
    end

    # Add routing language to user
    # 
    # @param user_id User ID
    # @param body Language
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingLanguage, Fixnum, Hash)>] UserRoutingLanguage data, response status code and response headers
    def post_user_routinglanguages_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_user_routinglanguages ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.post_user_routinglanguages" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_user_routinglanguages" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routinglanguages".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingLanguage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_user_routinglanguages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add routing skill to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingSkill]
    def post_user_routingskills(user_id, body, opts = {})
      data, _status_code, _headers = post_user_routingskills_with_http_info(user_id, body, opts)
      return data
    end

    # Add routing skill to user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingSkill, Fixnum, Hash)>] UserRoutingSkill data, response status code and response headers
    def post_user_routingskills_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.post_user_routingskills ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.post_user_routingskills" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.post_user_routingskills" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#post_user_routingskills\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [InboundRoute]
    def put_routing_email_domain_route(domain_name, route_id, body, opts = {})
      data, _status_code, _headers = put_routing_email_domain_route_with_http_info(domain_name, route_id, body, opts)
      return data
    end

    # Update a route
    # 
    # @param domain_name email domain
    # @param route_id route ID
    # @param body Route
    # @param [Hash] opts the optional parameters
    # @return [Array<(InboundRoute, Fixnum, Hash)>] InboundRoute data, response status code and response headers
    def put_routing_email_domain_route_with_http_info(domain_name, route_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_email_domain_route ..."
      end
      
      
      # verify the required parameter 'domain_name' is set
      fail ArgumentError, "Missing the required parameter 'domain_name' when calling RoutingApi.put_routing_email_domain_route" if domain_name.nil?
      
      
      
      
      
      
      # verify the required parameter 'route_id' is set
      fail ArgumentError, "Missing the required parameter 'route_id' when calling RoutingApi.put_routing_email_domain_route" if route_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_email_domain_route" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/email/domains/{domainName}/routes/{routeId}".sub('{format}','json').sub('{' + 'domainName' + '}', domain_name.to_s).sub('{' + 'routeId' + '}', route_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InboundRoute')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_email_domain_route\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a recipient
    # 
    # @param recipient_id Recipient ID
    # @param body Recipient
    # @param [Hash] opts the optional parameters
    # @return [Recipient]
    def put_routing_message_recipient(recipient_id, body, opts = {})
      data, _status_code, _headers = put_routing_message_recipient_with_http_info(recipient_id, body, opts)
      return data
    end

    # Update a recipient
    # 
    # @param recipient_id Recipient ID
    # @param body Recipient
    # @param [Hash] opts the optional parameters
    # @return [Array<(Recipient, Fixnum, Hash)>] Recipient data, response status code and response headers
    def put_routing_message_recipient_with_http_info(recipient_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_message_recipient ..."
      end
      
      
      # verify the required parameter 'recipient_id' is set
      fail ArgumentError, "Missing the required parameter 'recipient_id' when calling RoutingApi.put_routing_message_recipient" if recipient_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_message_recipient" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/message/recipients/{recipientId}".sub('{format}','json').sub('{' + 'recipientId' + '}', recipient_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Recipient')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_message_recipient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Queue]
    def put_routing_queue(queue_id, body, opts = {})
      data, _status_code, _headers = put_routing_queue_with_http_info(queue_id, body, opts)
      return data
    end

    # Update a queue
    # 
    # @param queue_id Queue ID
    # @param body Queue
    # @param [Hash] opts the optional parameters
    # @return [Array<(Queue, Fixnum, Hash)>] Queue data, response status code and response headers
    def put_routing_queue_with_http_info(queue_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_queue ..."
      end
      
      
      # verify the required parameter 'queue_id' is set
      fail ArgumentError, "Missing the required parameter 'queue_id' when calling RoutingApi.put_routing_queue" if queue_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_queue" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/queues/{queueId}".sub('{format}','json').sub('{' + 'queueId' + '}', queue_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Queue')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an organization's routing settings
    # 
    # @param body Organization Settings
    # @param [Hash] opts the optional parameters
    # @return [RoutingSettings]
    def put_routing_settings(body, opts = {})
      data, _status_code, _headers = put_routing_settings_with_http_info(body, opts)
      return data
    end

    # Update an organization&#39;s routing settings
    # 
    # @param body Organization Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoutingSettings, Fixnum, Hash)>] RoutingSettings data, response status code and response headers
    def put_routing_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_settings ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_settings" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/settings".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RoutingSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update Transcription Settings
    # 
    # @param body Organization Settings
    # @param [Hash] opts the optional parameters
    # @return [TranscriptionSettings]
    def put_routing_settings_transcription(body, opts = {})
      data, _status_code, _headers = put_routing_settings_transcription_with_http_info(body, opts)
      return data
    end

    # Update Transcription Settings
    # 
    # @param body Organization Settings
    # @param [Hash] opts the optional parameters
    # @return [Array<(TranscriptionSettings, Fixnum, Hash)>] TranscriptionSettings data, response status code and response headers
    def put_routing_settings_transcription_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_settings_transcription ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_settings_transcription" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/settings/transcription".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TranscriptionSettings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_settings_transcription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param body SmsPhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [SmsPhoneNumber]
    def put_routing_sms_phonenumber(address_id, body, opts = {})
      data, _status_code, _headers = put_routing_sms_phonenumber_with_http_info(address_id, body, opts)
      return data
    end

    # Update a phone number provisioned for SMS.
    # 
    # @param address_id Address ID
    # @param body SmsPhoneNumber
    # @param [Hash] opts the optional parameters
    # @return [Array<(SmsPhoneNumber, Fixnum, Hash)>] SmsPhoneNumber data, response status code and response headers
    def put_routing_sms_phonenumber_with_http_info(address_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_sms_phonenumber ..."
      end
      
      
      # verify the required parameter 'address_id' is set
      fail ArgumentError, "Missing the required parameter 'address_id' when calling RoutingApi.put_routing_sms_phonenumber" if address_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_sms_phonenumber" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/sms/phonenumbers/{addressId}".sub('{format}','json').sub('{' + 'addressId' + '}', address_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SmsPhoneNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_sms_phonenumber\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the user's max utilization settings.  Include only those media types requiring custom configuration.
    # 
    # @param user_id User ID
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def put_routing_user_utilization(user_id, body, opts = {})
      data, _status_code, _headers = put_routing_user_utilization_with_http_info(user_id, body, opts)
      return data
    end

    # Update the user&#39;s max utilization settings.  Include only those media types requiring custom configuration.
    # 
    # @param user_id User ID
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def put_routing_user_utilization_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_user_utilization ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.put_routing_user_utilization" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_user_utilization" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/users/{userId}/utilization".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_user_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
    # 
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Utilization]
    def put_routing_utilization(body, opts = {})
      data, _status_code, _headers = put_routing_utilization_with_http_info(body, opts)
      return data
    end

    # Update the organization-wide max utilization settings.  Include only those media types requiring custom configuration.
    # 
    # @param body utilization
    # @param [Hash] opts the optional parameters
    # @return [Array<(Utilization, Fixnum, Hash)>] Utilization data, response status code and response headers
    def put_routing_utilization_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_utilization ..."
      end
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_utilization" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/utilization".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Utilization')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_utilization\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [WrapupCode]
    def put_routing_wrapupcode(code_id, body, opts = {})
      data, _status_code, _headers = put_routing_wrapupcode_with_http_info(code_id, body, opts)
      return data
    end

    # Update wrap-up code
    # 
    # @param code_id Wrapup Code ID
    # @param body WrapupCode
    # @param [Hash] opts the optional parameters
    # @return [Array<(WrapupCode, Fixnum, Hash)>] WrapupCode data, response status code and response headers
    def put_routing_wrapupcode_with_http_info(code_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_routing_wrapupcode ..."
      end
      
      
      # verify the required parameter 'code_id' is set
      fail ArgumentError, "Missing the required parameter 'code_id' when calling RoutingApi.put_routing_wrapupcode" if code_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_routing_wrapupcode" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/routing/wrapupcodes/{codeId}".sub('{format}','json').sub('{' + 'codeId' + '}', code_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WrapupCode')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_routing_wrapupcode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update routing skill proficiency or state.
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserRoutingSkill]
    def put_user_routingskill(user_id, skill_id, body, opts = {})
      data, _status_code, _headers = put_user_routingskill_with_http_info(user_id, skill_id, body, opts)
      return data
    end

    # Update routing skill proficiency or state.
    # 
    # @param user_id User ID
    # @param skill_id skillId
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserRoutingSkill, Fixnum, Hash)>] UserRoutingSkill data, response status code and response headers
    def put_user_routingskill_with_http_info(user_id, skill_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_user_routingskill ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.put_user_routingskill" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'skill_id' is set
      fail ArgumentError, "Missing the required parameter 'skill_id' when calling RoutingApi.put_user_routingskill" if skill_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_user_routingskill" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/{skillId}".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s).sub('{' + 'skillId' + '}', skill_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserRoutingSkill')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_user_routingskill\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replace all routing skills assigned to a user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [UserSkillEntityListing]
    def put_user_routingskills_bulk(user_id, body, opts = {})
      data, _status_code, _headers = put_user_routingskills_bulk_with_http_info(user_id, body, opts)
      return data
    end

    # Replace all routing skills assigned to a user
    # 
    # @param user_id User ID
    # @param body Skill
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSkillEntityListing, Fixnum, Hash)>] UserSkillEntityListing data, response status code and response headers
    def put_user_routingskills_bulk_with_http_info(user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: RoutingApi.put_user_routingskills_bulk ..."
      end
      
      
      # verify the required parameter 'user_id' is set
      fail ArgumentError, "Missing the required parameter 'user_id' when calling RoutingApi.put_user_routingskills_bulk" if user_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'body' is set
      fail ArgumentError, "Missing the required parameter 'body' when calling RoutingApi.put_user_routingskills_bulk" if body.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/users/{userId}/routingskills/bulk".sub('{format}','json').sub('{' + 'userId' + '}', user_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UserSkillEntityListing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RoutingApi#put_user_routingskills_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
