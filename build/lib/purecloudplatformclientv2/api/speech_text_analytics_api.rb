=begin
PureCloud Platform API

With the PureCloud Platform API, you can control all aspects of your PureCloud environment. With the APIs you can access the system configuration, manage conversations and more.

OpenAPI spec version: v2
Contact: DeveloperEvangelists@genesys.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

License: UNLICENSED
https://help.mypurecloud.com/articles/terms-and-conditions/

Terms of Service: https://help.mypurecloud.com/articles/terms-and-conditions/

=end

require "uri"

module PureCloud
  class SpeechTextAnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Speech and Text Analytics for a specific conversation
    # 
    # @param conversation_id Conversation Id
    # @param [Hash] opts the optional parameters
    # @return [ConversationMetrics]
    def get_speechandtextanalytics_conversation(conversation_id, opts = {})
      data, _status_code, _headers = get_speechandtextanalytics_conversation_with_http_info(conversation_id, opts)
      return data
    end

    # Get Speech and Text Analytics for a specific conversation
    # 
    # @param conversation_id Conversation Id
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConversationMetrics, Fixnum, Hash)>] ConversationMetrics data, response status code and response headers
    def get_speechandtextanalytics_conversation_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpeechTextAnalyticsApi.get_speechandtextanalytics_conversation ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling SpeechTextAnalyticsApi.get_speechandtextanalytics_conversation" if conversation_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/speechandtextanalytics/conversations/{conversationId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConversationMetrics')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechTextAnalyticsApi#get_speechandtextanalytics_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the pre-signed S3 URL for the transcript of a specific communication of a conversation
    # 
    # @param conversation_id Conversation ID
    # @param communication_id Communication ID
    # @param [Hash] opts the optional parameters
    # @return [TranscriptUrl]
    def get_speechandtextanalytics_conversation_communication_transcripturl(conversation_id, communication_id, opts = {})
      data, _status_code, _headers = get_speechandtextanalytics_conversation_communication_transcripturl_with_http_info(conversation_id, communication_id, opts)
      return data
    end

    # Get the pre-signed S3 URL for the transcript of a specific communication of a conversation
    # 
    # @param conversation_id Conversation ID
    # @param communication_id Communication ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(TranscriptUrl, Fixnum, Hash)>] TranscriptUrl data, response status code and response headers
    def get_speechandtextanalytics_conversation_communication_transcripturl_with_http_info(conversation_id, communication_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SpeechTextAnalyticsApi.get_speechandtextanalytics_conversation_communication_transcripturl ..."
      end
      
      
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling SpeechTextAnalyticsApi.get_speechandtextanalytics_conversation_communication_transcripturl" if conversation_id.nil?
      
      
      
      
      
      
      # verify the required parameter 'communication_id' is set
      fail ArgumentError, "Missing the required parameter 'communication_id' when calling SpeechTextAnalyticsApi.get_speechandtextanalytics_conversation_communication_transcripturl" if communication_id.nil?
      
      
      
      
      
      # resource path
      local_var_path = "/api/v2/speechandtextanalytics/conversations/{conversationId}/communications/{communicationId}/transcripturl".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'communicationId' + '}', communication_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      
      auth_names = ['PureCloud OAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TranscriptUrl')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpeechTextAnalyticsApi#get_speechandtextanalytics_conversation_communication_transcripturl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
